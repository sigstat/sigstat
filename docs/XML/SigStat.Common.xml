<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SigStat.Common</name>
    </assembly>
    <members>
        <member name="T:SigStat.Common.Algorithms.Classifiers.Ocjknn">
            <summary>
            One Class JKNN classifier based on: Khan, Shehroz Saeed. "Kernels for one-class nearest neighbour classification and comparison of chemical spectral data." College of Engineering and Informatics, National University of Ireland (2010).
            https://cs.uwaterloo.ca/~s255khan/files/Kernels_for_One-Class_Nearest_Neighbour_Classification_and_Comparison_of_Chemical_Spectral_Data-libre.pdf
            </summary>
        </member>
        <member name="M:SigStat.Common.Algorithms.Classifiers.Ocjknn.Test``1(``0,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Double,System.Func{``0,``0,System.Double})">
            <summary>
            Step 1: find the <paramref name="j"/> nearest neighbors of <paramref name="testItem"/> in the set of <paramref name="targetItems"/>. 
            Step 2: for each neighbor, if (distance from test) / (average distance from <paramref name="k"/> nearest neighbors) &lt; <paramref name="threshold"/> accept++
            Steo 3: return accept / <paramref name="j"/>
            </summary>
            <typeparam name="T">Item type (typically a vector or a label, that  <paramref name="distanceFunction"/> can work with)</typeparam>
            <param name="testItem">The item, that we want to classify</param>
            <param name="targetItems">Items belonging to the target class</param>
            <param name="j">See algorithm description for details</param>
            <param name="k">See algorithm description for details</param>
            <param name="threshold">See algorithm description for details</param>
            <param name="distanceFunction">Calculates the distance between two items of type <typeparamref name="T"/></param>
            <returns>If the result is 0.5 or greater, then <paramref name="testItem"/> should be accepted as a member of target class</returns>
        </member>
        <member name="T:SigStat.Common.Algorithms.Distances.DtwDistance">
            <summary>
            Calculates the distance between two vector sequences using Dynamic Time Warping
            </summary>
            <remarks>Based on: Abdullah Mueen, Eamonn J. Keogh: Extracting Optimal
            Performance from Dynamic Time Warping.KDD 2016: 2129-2130</remarks>
        </member>
        <member name="P:SigStat.Common.Algorithms.Distances.DtwDistance.LocalDistance">
            <summary>
            The local distance function to use, when calculating the distance between two sueqence-points. Default is EuclideanDistance
            </summary>
        </member>
        <member name="M:SigStat.Common.Algorithms.Distances.DtwDistance.#ctor(SigStat.Common.Algorithms.Distances.IDistance{System.Double[]})">
            <summary>
            Initializes a new instance of the DtwDistance class with default settings
            </summary>
            <param name="localDistance">The distance function used to calculate the distance between two individual points of the squences. Set the parameter to 'null' to use the default <see cref="T:SigStat.Common.Algorithms.Distances.EuclideanDistance"/></param>
        </member>
        <member name="M:SigStat.Common.Algorithms.Distances.DtwDistance.Calculate(System.Double[][],System.Double[][])">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Algorithms.Distances.EuclideanDistance">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Algorithms.Distances.EuclideanDistance.Calculate(System.Double[],System.Double[])">
            <summary>
              Gets the Euclidean distance between two points.
            </summary>
            
            <param name="x">A point in space.</param>
            <param name="y">A point in space.</param>
            
            <returns>The Euclidean distance between x and y.</returns>
        </member>
        <member name="T:SigStat.Common.Algorithms.Distances.IDistance`1">
            <summary>
            An abstract base class for the calculation of the distance of two entities (points, sequences etc.)
            </summary>
            <typeparam name="P">Entity type</typeparam>
        </member>
        <member name="M:SigStat.Common.Algorithms.Distances.IDistance`1.Calculate(`0,`0)">
            <summary>
            Calculates the distance between the two parameters
            </summary>
            <param name="p1">Firs parameter</param>
            <param name="p2">Second parameter</param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Algorithms.Distances.ManhattanDistance">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Algorithms.Distances.ManhattanDistance.Calculate(System.Double[],System.Double[])">
            <summary>
              Gets the Manhattan distance between two points.
            </summary>
            
            <param name="x">A point in space.</param>
            <param name="y">A point in space.</param>
            
            <returns>The Manhattan distance between x and y.</returns>
        </member>
        <member name="T:SigStat.Common.Algorithms.DtwImplementations">
            <summary>
            A simple implementation of the DTW algorithm.
            </summary>
        </member>
        <member name="M:SigStat.Common.Algorithms.DtwImplementations.OptimizedDtw``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Double},System.Int32,System.Int32)">
            <summary>
            Complex, optimized DTW calculation (Abdullah Mueen, Eamonn J. Keogh)
            </summary>
            <typeparam name="P"></typeparam>
            <param name="sequence1"></param>
            <param name="sequence2"></param>
            <param name="distance"></param>
            <param name="m"></param>
            <param name="r"></param>
            <returns></returns>
            <remarks>Bases on: Abdullah Mueen, Eamonn J. Keogh: Extracting Optimal
            Performance from Dynamic Time Warping.KDD 2016: 2129-2130</remarks>
        </member>
        <member name="M:SigStat.Common.Algorithms.DtwImplementations.ExactDtw``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Double})">
            <summary>
            Exact DTW implementation (Abdullah Mueen, Eamonn J. Keogh)
            </summary>
            <typeparam name="P"></typeparam>
            <param name="sequence1">The sequence1.</param>
            <param name="sequence2">The sequence2.</param>
            <param name="distance">The distance.</param>
            <returns></returns>
            <remarks>Bases on: Abdullah Mueen, Eamonn J. Keogh: Extracting Optimal
            Performance from Dynamic Time Warping.KDD 2016: 2129-2130</remarks>
        </member>
        <member name="M:SigStat.Common.Algorithms.DtwImplementations.ConstrainedDTw``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Double},System.Int32)">
            <summary>
            Constrained DTW implementation  (Abdullah Mueen, Eamonn J. Keogh)
            </summary>
            <typeparam name="P"></typeparam>
            <param name="sequence1">The sequence1.</param>
            <param name="sequence2">The sequence2.</param>
            <param name="distance">The distance.</param>
            <param name="w">The w.</param>
            <returns></returns>
            <remarks>Bases on: Abdullah Mueen, Eamonn J. Keogh: Extracting Optimal
            Performance from Dynamic Time Warping.KDD 2016: 2129-2130</remarks>
        </member>
        <member name="M:SigStat.Common.Algorithms.DtwImplementations.ExactDtwWikipedia``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Double})">
            <summary>
            Exact DTW implementation (Wikipedia)
            </summary>
            <typeparam name="P"></typeparam>
            <param name="sequence1">The sequence1.</param>
            <param name="sequence2">The sequence2.</param>
            <param name="distance">The distance.</param>
            <returns></returns>
            <remarks>https://en.wikipedia.org/wiki/Dynamic_time_warping</remarks>
        </member>
        <member name="M:SigStat.Common.Algorithms.DtwImplementations.ConstrainedDtwWikipedia``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Double},System.Int32)">
            <summary>
            Constrained DTW implementation  (Wikipedia)
            </summary>
            <typeparam name="P"></typeparam>
            <param name="sequence1">The sequence1.</param>
            <param name="sequence2">The sequence2.</param>
            <param name="distance">The distance.</param>
            <param name="w">The w.</param>
            <returns></returns>
            <remarks>https://en.wikipedia.org/wiki/Dynamic_time_warping</remarks>
        </member>
        <member name="T:SigStat.Common.Algorithms.HSCPThinningStep">
            <summary>
            HSCP thinning algorithm
            http://www.ppgia.pucpr.br/~facon/Afinamento/1987holt.pdf
            </summary>
        </member>
        <member name="P:SigStat.Common.Algorithms.HSCPThinningStep.ResultChanged">
            <summary>
            Gets whether the last <see cref="M:SigStat.Common.Algorithms.HSCPThinningStep.Scan(System.Boolean[0:,0:])"/> call was effective.
            </summary>
        </member>
        <member name="M:SigStat.Common.Algorithms.HSCPThinningStep.Scan(System.Boolean[0:,0:])">
            <summary>
            Does one step of the thinning. Call it iteratively while ResultChanged.
            </summary>
            <param name="b">Binary raster.</param>
            <returns>Thinned binary raster.</returns>
        </member>
        <member name="M:SigStat.Common.Algorithms.HSCPThinningStep.Neighbourhood(System.Boolean[0:,0:],System.Int32,System.Int32)">
            <summary>
            Gets neighbour pixels in order.
            </summary>
        </member>
        <member name="T:SigStat.Common.Algorithms.OnePixelThinningStep">
            <summary>
            One pixel thinning algorithm.
            Use this after <see cref="T:SigStat.Common.Algorithms.HSCPThinningStep"/> to generate final skeleton.
            </summary>
        </member>
        <member name="P:SigStat.Common.Algorithms.OnePixelThinningStep.ResultChanged">
            <summary>
            Gets whether the last <see cref="M:SigStat.Common.Algorithms.OnePixelThinningStep.Scan(System.Boolean[0:,0:])"/> call was effective.
            </summary>
        </member>
        <member name="M:SigStat.Common.Algorithms.OnePixelThinningStep.Scan(System.Boolean[0:,0:])">
            <summary>
            Does one step of the thinning. Call it iteratively while ResultChanged.
            Scans the input matrix and generates a 1-pixel thinned version.
            </summary>
            <param name="binaryImage">Binary raster.</param>
            <returns>Thinned binary raster.</returns>
        </member>
        <member name="T:SigStat.Common.Algorithms.PatternMatching3x3">
            <summary>
            Binary 3x3 pattern matcher with rotating option.
            </summary>
        </member>
        <member name="M:SigStat.Common.Algorithms.PatternMatching3x3.#ctor(System.Nullable{System.Boolean}[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Algorithms.PatternMatching3x3"/> class with given pattern.
            </summary>
            <param name="pattern">3x3 pattern. null: don't care.</param>
        </member>
        <member name="M:SigStat.Common.Algorithms.PatternMatching3x3.Match(System.Boolean[0:,0:])">
            <summary>
            Match the 3x3 input with the 3x3 pattern.
            </summary>
            <param name="input"></param>
            <returns>True if the pattern matches.</returns>
        </member>
        <member name="M:SigStat.Common.Algorithms.PatternMatching3x3.RotMatch(System.Boolean[0:,0:])">
            <summary>
            Match the 3x3 input with the 3x3 pattern from all 4 directions.
            </summary>
            <param name="input"></param>
            <returns>True if the pattern matches from at least one direction.</returns>
        </member>
        <member name="M:SigStat.Common.Algorithms.PatternMatching3x3.Rotate(System.Nullable{System.Boolean}[0:,0:])">
            <summary>
            Rotate a 3x3 pattern by 90d.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Baseline">
             <summary>
            
             </summary>
        </member>
        <member name="P:SigStat.Common.Baseline.Start">
            <summary>
            Starting point of the baseline
            </summary>
        </member>
        <member name="P:SigStat.Common.Baseline.End">
            <summary>
            Endpoint of the baseline
            </summary>
        </member>
        <member name="M:SigStat.Common.Baseline.#ctor">
            <summary>
            Initializes a Baseline instance
            </summary>
        </member>
        <member name="M:SigStat.Common.Baseline.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a Baseline instance with the given startpoint and endpoint
            </summary>
            <param name="x1">x coordinate for the start point</param>
            <param name="y1">y coordinate for the start point</param>
            <param name="x2">x coordinate for the endpoint</param>
            <param name="y2">y coordinate for the endpoint</param>
        </member>
        <member name="M:SigStat.Common.Baseline.ToString">
            <summary>
            Returns a string representation of the baseline
            </summary>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Features">
            <summary>
            Standard set of features.
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.Size">
            <summary>
            Actual bounds of the signature
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.TrimmedBounds">
            <summary>
            Represents the main body of the signature <see cref="T:SigStat.Common.BasicMetadataExtraction"/>
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.Dpi">
            <summary>
            Dots per inch
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.X">
            <summary>
            X coordinates of an online signature as a function of <see cref="F:SigStat.Common.Features.T"/>
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.Y">
            <summary>
            Y coordinates of an online signature as a function of <see cref="F:SigStat.Common.Features.T"/>
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.T">
            <summary>
            Timestamps for online signatures
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.PenDown">
            <summary>
            Pen position of an online signature as a function of <see cref="F:SigStat.Common.Features.T"/>.
            It is true when the pen touches the paper.
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.PointType">
            <summary>
            Type of points of an online signature as a function of <see cref="F:SigStat.Common.Features.T"/>.
            The type of a point is defined by:
            0 - Stroke - Internal point of an up or downstroke
            1 - Start - Starting point of a downstroke
            2 - End - Last point of a downstroke
            3 - ShortStroke - First and last point of a downstroke
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.Azimuth">
            <summary>
            Azimuth of an online signature as a function of <see cref="F:SigStat.Common.Features.T"/>
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.Altitude">
            <summary>
            Altitude of an online signature as a function of <see cref="F:SigStat.Common.Features.T"/>
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.Pressure">
            <summary>
            Pressure of an online signature as a function of <see cref="F:SigStat.Common.Features.T"/>
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.Image">
            <summary>
            The visaul representation of a signature
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.Cog">
            <summary>
            Center of gravity in a signature
            </summary>
        </member>
        <member name="F:SigStat.Common.Features.All">
            <summary>
            Returns a readonly list of all <see cref="T:SigStat.Common.FeatureDescriptor"/>s defined in <see cref="T:SigStat.Common.Features"/>
            </summary>
        </member>
        <member name="T:SigStat.Common.Loop">
            <summary>
            Represents a loop in a signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Loop.Center">
            <summary>
            The geometrical center of the looop
            </summary>
        </member>
        <member name="P:SigStat.Common.Loop.Bounds">
            <summary>
            The bounding rectangle of the loop
            </summary>
        </member>
        <member name="P:SigStat.Common.Loop.Points">
            <summary>
            A list of defining points of the loop
            </summary>
        </member>
        <member name="M:SigStat.Common.Loop.#ctor">
            <summary>
            Creates a <see cref="T:SigStat.Common.Loop"/> instance
            </summary>
        </member>
        <member name="M:SigStat.Common.Loop.#ctor(System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:SigStat.Common.Loop"/> instance and initializes the <see cref="P:SigStat.Common.Loop.Center"/> property
            </summary>
            <param name="centerX"></param>
            <param name="centerY"></param>
        </member>
        <member name="M:SigStat.Common.Loop.ToString">
            <summary>
            Returns a string representation of the loop
            </summary>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.ILoggerObject">
            <summary>
            Represents a type, that contains an ILogger property that can be used to perform logging.
            </summary>
        </member>
        <member name="P:SigStat.Common.ILoggerObject.Logger">
            <summary>
            Gets or sets the ILogger implementation used to perform logging 
            </summary>
        </member>
        <member name="T:SigStat.Common.ILoggerObjectExtensions">
            <summary>
            ILoggerObject extension methods for common scenarios.
            </summary>
            <remarks>
            Note to framework developers: you may extend this class with additional overloads if they are required
            </remarks>
        </member>
        <member name="M:SigStat.Common.ILoggerObjectExtensions.LogError(SigStat.Common.ILoggerObject,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="obj">The SigStat.Common.ILoggerObject containing the Logger to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: "User {User} logged in from {Address}"</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SigStat.Common.ILoggerObjectExtensions.LogError(SigStat.Common.ILoggerObject,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="obj">The SigStat.Common.ILoggerObject containing the Logger to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: "User {User} logged in from {Address}"</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SigStat.Common.ILoggerObjectExtensions.LogInformation(SigStat.Common.ILoggerObject,System.String,System.Object[])">
            <summary>
            Formats and writes an informational log message.
            </summary>
            <param name="obj">The SigStat.Common.ILoggerObject containing the Logger to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: "User {User} logged in from {Address}"</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SigStat.Common.ILoggerObjectExtensions.LogWarning(SigStat.Common.ILoggerObject,System.String,System.Object[])">
            <summary>
            Formats and writes an warning log message.
            </summary>
            <param name="obj">The SigStat.Common.ILoggerObject containing the Logger to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: "User {User} logged in from {Address}"</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SigStat.Common.ILoggerObjectExtensions.LogWarning(SigStat.Common.ILoggerObject,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes an warning log message.
            </summary>
            <param name="obj">The SigStat.Common.ILoggerObject containing the Logger to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: "User {User} logged in from {Address}"</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SigStat.Common.ILoggerObjectExtensions.LogTrace(SigStat.Common.ILoggerObject,System.String,System.Object[])">
            <summary>
            Formats and writes a trace log message.
            </summary>
            <param name="obj">The SigStat.Common.ILoggerObject containing the Logger to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: "User {User} logged in from {Address}"</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SigStat.Common.ILoggerObjectExtensions.LogTrace``1(SigStat.Common.ILoggerObject,``0,Microsoft.Extensions.Logging.EventId,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Formats and writes a trace log message with state.
            </summary>
            <typeparam name="TState">The type of the object to be written (preferably a descendant of SigstatLogState).</typeparam>
            <param name="obj">The SigStat.Common.ILoggerObject containing the Logger to write to.</param>
            <param name="state">The entry to be written.</param>
            <param name="eventId">Id of the event.</param>
            <param name="exception">The exception related to this entry.</param>
            <param name="formatter">Function to create a String message of the state and exception.</param>
        </member>
        <member name="M:SigStat.Common.ILoggerObjectExtensions.LogCritical(SigStat.Common.ILoggerObject,System.String,System.Object[])">
            <summary>
            Formats and writes an critical error log message.
            </summary>
            <param name="obj">The SigStat.Common.ILoggerObject containing the Logger to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: "User {User} logged in from {Address}"</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SigStat.Common.ILoggerObjectExtensions.LogDebug(SigStat.Common.ILoggerObject,System.String,System.Object[])">
            <summary>
            Formats and writes an debug log message.
            </summary>
            <param name="obj">The SigStat.Common.ILoggerObject containing the Logger to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: "User {User} logged in from {Address}"</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:SigStat.Common.Sampler">
            <summary>
            Takes samples from a set of <see cref="T:SigStat.Common.Signature"/>s by given sampling strategies.
            Use this to fine-tune the <see cref="T:SigStat.Common.VerifierBenchmark"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.Sampler.TrainingFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:SigStat.Common.Sampler.GenuineTestFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:SigStat.Common.Sampler.ForgeryTestFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:SigStat.Common.Sampler.#ctor(System.Func{System.Collections.Generic.List{SigStat.Common.Signature},System.Collections.Generic.List{SigStat.Common.Signature}},System.Func{System.Collections.Generic.List{SigStat.Common.Signature},System.Collections.Generic.List{SigStat.Common.Signature}},System.Func{System.Collections.Generic.List{SigStat.Common.Signature},System.Collections.Generic.List{SigStat.Common.Signature}})">
            <summary>
            Initialize a new instance of the <see cref="T:SigStat.Common.Sampler"/> class by given sampling strategies.
            </summary>
            <param name="references">Strategy to sample genuine signatures to be used for training.</param>
            <param name="genuineTests">Strategy to sample genuine signatures to be used for testing.</param>
            <param name="forgeryTests">Strategy to sample forged signatures to be used for testing.</param>
        </member>
        <member name="M:SigStat.Common.Sampler.SampleReferences(System.Collections.Generic.List{SigStat.Common.Signature})">
            <summary>
            Samples a batch of genuine reference signatures to train on.
            </summary>
            <returns>Genuine reference signatures to train on.</returns>
        </member>
        <member name="M:SigStat.Common.Sampler.SampleGenuineTests(System.Collections.Generic.List{SigStat.Common.Signature})">
            <summary>
            Samples a batch of genuine test signatures to test on.
            </summary>
            <returns>Genuine signatures to test on.</returns>
        </member>
        <member name="M:SigStat.Common.Sampler.SampleForgeryTests(System.Collections.Generic.List{SigStat.Common.Signature})">
            <summary>
            Samples a batch of forged signatures to test on.
            </summary>
            <returns>Forged signatures to test on.</returns>
        </member>
        <member name="T:SigStat.Common.Framework.Samplers.EvenNSampler">
            <summary>
            Selects the first N signatures with even index for training
            </summary>
        </member>
        <member name="P:SigStat.Common.Framework.Samplers.EvenNSampler.N">
            <summary>
            Count of signatures used for training
            </summary>
        </member>
        <member name="M:SigStat.Common.Framework.Samplers.EvenNSampler.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="n">count of signatures used for training</param>
        </member>
        <member name="T:SigStat.Common.Framework.Samplers.FirstNSampler">
            <summary>
            Selects the first N signatures for training
            </summary>
        </member>
        <member name="P:SigStat.Common.Framework.Samplers.FirstNSampler.N">
            <summary>
            Count of signatures used for training
            </summary>
        </member>
        <member name="M:SigStat.Common.Framework.Samplers.FirstNSampler.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="n">count of signatures used for training</param>
        </member>
        <member name="T:SigStat.Common.Framework.Samplers.LastNSampler">
            <summary>
            Selects the first N signatures for training
            </summary>
        </member>
        <member name="P:SigStat.Common.Framework.Samplers.LastNSampler.N">
            <summary>
            Count of signatures used for training
            </summary>
        </member>
        <member name="M:SigStat.Common.Framework.Samplers.LastNSampler.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="n">Count of signatures used for training</param>
        </member>
        <member name="T:SigStat.Common.Framework.Samplers.OddNSampler">
            <summary>
            Selects the first N signatures with odd index for training
            </summary>
        </member>
        <member name="P:SigStat.Common.Framework.Samplers.OddNSampler.N">
            <summary>
            Count of signatures used for training
            </summary>
        </member>
        <member name="M:SigStat.Common.Framework.Samplers.OddNSampler.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="n">Count of signatures used for training</param>
        </member>
        <member name="T:SigStat.Common.Framework.Samplers.TestingSampler">
            <summary>
            Testing sampler for signer dependent sampling frequency verification system
            </summary>
        </member>
        <member name="P:SigStat.Common.Framework.Samplers.TestingSampler.N">
            <summary>
            Count of signatures used for training
            </summary>
        </member>
        <member name="M:SigStat.Common.Framework.Samplers.TestingSampler.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="n">count of signatures used for training</param>
        </member>
        <member name="T:SigStat.Common.Framework.Samplers.UniversalSampler">
            <summary>
            Selects a given number of signatures for training and testing
            </summary>
        </member>
        <member name="P:SigStat.Common.Framework.Samplers.UniversalSampler.TrainingCount">
            <summary>
            Count of signatures to use for training
            </summary>
        </member>
        <member name="P:SigStat.Common.Framework.Samplers.UniversalSampler.TestCount">
            <summary>
            Count of signatures to use for testing
            </summary>
        </member>
        <member name="M:SigStat.Common.Framework.Samplers.UniversalSampler.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="trainingCount">Count of signatures to use for training</param>
            <param name="testCount">Count of signatures to use for testing</param>
        </member>
        <member name="T:SigStat.Common.SigStatEvents">
            <summary>
            Standard event identifiers used by the SigStat system
            </summary>
        </member>
        <member name="F:SigStat.Common.SigStatEvents.BenchmarkEvent">
            <summary>
            Events originating from a benchmark
            </summary>
        </member>
        <member name="F:SigStat.Common.SigStatEvents.VerifierEvent">
            <summary>
            Events originating from a verifier
            </summary>
        </member>
        <member name="T:SigStat.Common.Model.Verifier">
            <summary>
            Uses pipelines to transform, train on, and classify <see cref="T:SigStat.Common.Signature"/> objects.
            </summary>
        </member>
        <member name="P:SigStat.Common.Model.Verifier.AllFeatures">
            <summary>
            This property is used by the Serializer to access a list of all FeatureDescriptors
            </summary>
        </member>
        <member name="P:SigStat.Common.Model.Verifier.Pipeline">
            <summary> Gets or sets the transform pipeline. Hands over the Logger object. </summary>
        </member>
        <member name="P:SigStat.Common.Model.Verifier.Classifier">
            <summary>  Gets or sets the classifier pipeline. Hands over the Logger object. </summary>
        </member>
        <member name="P:SigStat.Common.Model.Verifier.SignerModel">
            <summary>Gets or sets the signer model.</summary>
            <value>The signer model.</value>
        </member>
        <member name="P:SigStat.Common.Model.Verifier.Logger">
            <summary> Gets or sets the class responsible for logging</summary>
        </member>
        <member name="M:SigStat.Common.Model.Verifier.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Model.Verifier"/> class
            </summary>
            <param name="logger">Initializes the Logger property of the <see cref="T:SigStat.Common.Model.Verifier"/></param>
        </member>
        <member name="M:SigStat.Common.Model.Verifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Model.Verifier"/> class.
            </summary>
        </member>
        <member name="M:SigStat.Common.Model.Verifier.#ctor(SigStat.Common.Model.Verifier)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Model.Verifier"/> class based on another Verifier instance
            </summary>
            <param name="baseVerifier">The reference verifier</param>
        </member>
        <member name="M:SigStat.Common.Model.Verifier.Train(System.Collections.Generic.List{SigStat.Common.Signature})">
            <summary>
            Trains the verifier with a list of signatures. Uses the <see cref="P:SigStat.Common.Model.Verifier.Pipeline"/> to extract features,
            and <see cref="P:SigStat.Common.Model.Verifier.Classifier"/> to find an optimized limit.
            </summary>
            <param name="signatures">The list of signatures to train on.</param>
            <remarks>Note that <paramref name="signatures"/> may contain both genuine and forged signatures.
            It's up to the classifier, whether it takes advantage of both classes</remarks>
        </member>
        <member name="M:SigStat.Common.Model.Verifier.Test(SigStat.Common.Signature)">
            <summary>
            Verifies the genuinity of <paramref name="signature"/>.
            </summary>
            <param name="signature"></param>
            <returns>True if <paramref name="signature"/> passes the verification test.</returns>
        </member>
        <member name="T:SigStat.Common.Model.SampleRateResults">
            <summary>
            used to store results for testing different sampling frequencies
            </summary>
        </member>
        <member name="P:SigStat.Common.Model.SampleRateResults.step">
            <summary>
            number of skipped points
            </summary>
        </member>
        <member name="P:SigStat.Common.Model.SampleRateResults.pointsAvg">
            <summary>
            average points of the signer
            </summary>
        </member>
        <member name="P:SigStat.Common.Model.SampleRateResults.AER">
            <summary>
            AER for current sampling frequency test
            </summary>
        </member>
        <member name="P:SigStat.Common.Model.SampleRateResults.samplerate">
            <summary>
            current samplerate tested
            </summary>
        </member>
        <member name="T:SigStat.Common.Result">
            <summary>Contains the benchmark results of a single <see cref="T:SigStat.Common.Signer"/></summary>
        </member>
        <member name="P:SigStat.Common.Result.Signer">
            <summary>Identifier of the <see cref="P:SigStat.Common.Result.Signer"/></summary>
        </member>
        <member name="P:SigStat.Common.Result.Frr">
            <summary>False Rejection Rate</summary>
        </member>
        <member name="P:SigStat.Common.Result.Far">
            <summary>False Acceptance Rate</summary>
        </member>
        <member name="P:SigStat.Common.Result.Aer">
            <summary>Average Error Rate</summary>
        </member>
        <member name="P:SigStat.Common.Result.Model">
            HACK: Consider removing this after benchmark
        </member>
        <member name="T:SigStat.Common.BenchmarkResults">
            <summary>Contains the benchmark results of every <see cref="T:SigStat.Common.Signer"/> and the summarized final results.</summary>
        </member>
        <member name="P:SigStat.Common.BenchmarkResults.SignerResults">
            <summary>List that contains the <see cref="T:SigStat.Common.Result"/>s for each <see cref="T:SigStat.Common.Signer"/></summary>
        </member>
        <member name="P:SigStat.Common.BenchmarkResults.FinalResult">
            <summary>Summarized, final result of the benchmark execution.</summary>
        </member>
        <member name="T:SigStat.Common.VerifierBenchmark">
            <summary> Benchmarking class to test error rates of a <see cref="T:SigStat.Common.Model.Verifier"/> </summary>   
        </member>
        <member name="F:SigStat.Common.VerifierBenchmark.loader">
            <summary> The loader to take care of <see cref="T:SigStat.Common.Signature"/> database loading. </summary>
        </member>
        <member name="F:SigStat.Common.VerifierBenchmark.sampler">
            <summary> Defines the sampling strategy for the benchmark. </summary>
        </member>
        <member name="P:SigStat.Common.VerifierBenchmark.Verifier">
            <summary> Gets or sets the <see cref="T:SigStat.Common.Model.Verifier"/> to be benchmarked. </summary>
        </member>
        <member name="P:SigStat.Common.VerifierBenchmark.Parameters">
            <summary>A key value store that can be used to store custom information about the benchmark</summary>
        </member>
        <member name="P:SigStat.Common.VerifierBenchmark.SignerModels">
            <summary>
            An optional dictionary of fully or partially precalculated signer models. You may fill itt before
            executing a benchmark if you have saved the models previously
            </summary>
        </member>
        <member name="M:SigStat.Common.VerifierBenchmark.Dump(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Dumps the results of the benchmark in a file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="parameters">The custom parameters of the benchmark (to be included in the dump)</param>
        </member>
        <member name="P:SigStat.Common.VerifierBenchmark.Logger">
            <summary> Gets or sets the attached <see cref="T:Microsoft.Extensions.Logging.ILogger"/> object used to log messages. Hands it over to the verifier. </summary>
        </member>
        <member name="P:SigStat.Common.VerifierBenchmark.Progress">
            <inheritdoc/>
        </member>
        <member name="P:SigStat.Common.VerifierBenchmark.Loader">
            <summary>
            The loader that will provide the database for benchmarking
            </summary>
        </member>
        <member name="P:SigStat.Common.VerifierBenchmark.Sampler">
            <summary>
            The <see cref="T:SigStat.Common.Sampler"/> to be used for benchmarking
            </summary>
        </member>
        <member name="E:SigStat.Common.VerifierBenchmark.ProgressChanged">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.VerifierBenchmark.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.VerifierBenchmark"/> class.
            Sets the <see cref="T:SigStat.Common.Sampler"/> to the default <see cref="T:SigStat.Common.Framework.Samplers.FirstNSampler"/>.
            </summary>
        </member>
        <member name="M:SigStat.Common.VerifierBenchmark.Execute(System.Boolean)">
            <summary>
            Execute the benchmarking process.
            </summary>
            <param name="ParallelMode"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.VerifierBenchmark.Execute(System.Int32)">
            <summary>
            Execute the benchmarking process with a degree of parallelism.
            </summary>
            <param name="degreeOfParallelism">Degree of parallelism is the maximum number of concurrently executing tasks.</param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.ArrayExtension">
            <summary>
            Helper methods for processing arrays
            </summary>
        </member>
        <member name="M:SigStat.Common.ArrayExtension.ToArrays``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Enumerates items into arrays of given capacity. If there are less items than 'capacity', a smaller array is returned
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="capacity">The capacity.</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.ArrayExtension.GetValues``1(``0[0:,0:])">
            <summary>
            Enumerates all values in a two dimensional array
            </summary>
            <typeparam name="T">Array type</typeparam>
            <param name="array">The array to enumerate</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.ArrayExtension.SetValues``1(``0[0:,0:],``0)">
            <summary>
            Sets all values in a two dimensional array to <paramref name="value"/>
            </summary>
            <typeparam name="T">Array type</typeparam>
            <param name="array">Array</param>
            <param name="value">New value for the array elements</param>
            <returns>A reference to <paramref name="array"/> (allows chaining)</returns>
        </member>
        <member name="M:SigStat.Common.ArrayExtension.Sum(System.Double[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the sum of the values in the given sub-array
            </summary>
            <param name="array">A two dimensional array with double values</param>
            <param name="x1">First index of the starting point for the region to summarize</param>
            <param name="y1">Second index of the starting point for the region to summarize</param>
            <param name="x2">First index of the endpoint for the region to summarize</param>
            <param name="y2">Second index of the endpoint for the region to summarize</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.ArrayExtension.SumCol(System.Double[0:,0:],System.Int32)">
            <summary>
            Returns the sum of column values in a two dimensional array
            </summary>
            <param name="array">A two dimensional array with double values</param>
            <param name="column">The column, to sum</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.ArrayExtension.SumRow(System.Double[0:,0:],System.Int32)">
            <summary>
            Returns the sum of row values in a two dimensional array
            </summary>
            <param name="array">A two dimensional array with double values</param>
            <param name="row">The row, to sum</param>
        </member>
        <member name="M:SigStat.Common.ArrayExtension.GetCog(System.Double[0:,0:])">
            <summary>
            Calculates the center of gravity, assuming that each cell contains
            a weight value
            </summary>
            <param name="weightMartix"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Helpers.BenchmarkConfig">
            <summary>
            Represents a configuration for a benchmark
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.BenchmarkConfig.FromJsonString(System.String)">
            <summary>
            helper
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.BenchmarkConfig.ToShortString">
            <summary>
            Helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.BenchmarkConfig.ToKeyValuePairs">
            <summary>
            Helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.BenchmarkConfig.ToJsonString">
            <summary>
            Helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.BenchmarkConfig.FromJsonFile(System.String)">
            <summary>
            Helper
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.BenchmarkConfig.GenerateConfigurations">
            <summary>
            Helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.BenchmarkConfig.Samplers(System.Collections.Generic.List{SigStat.Common.Helpers.BenchmarkConfig})">
            <summary>
            Helper
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Helpers.DataCleaningHelper">
            <summary>
            Helper class for cleaning online signature data in loaders
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.DataCleaningHelper.InitializeTimestamps(SigStat.Common.Signature,System.Double)">
            <summary>
            Initialize timestamps of an online signature which does not have captured timestamps
            </summary>
            <param name="signature">The online signature which's timestamps are initialized</param>
            <param name="unitTimeSlot">The unit time slot between two points of the signature</param>
        </member>
        <member name="M:SigStat.Common.Helpers.DataCleaningHelper.GeneratePointTypeValuesFromPressure(System.Double[])">
            <summary>
            Generate point type values of an online signature based on its pressure values (zero pressure points are required)
            </summary>
            <param name="pressure">The preussure values of an online signature</param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Helpers.ExcelHelper">
            <summary>
            Extension methods for common EPPlus tasks
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.Merge(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Merge all cells into one in the range.
            </summary>
            <param name="range">Cells to merge</param>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.FormatAsTable(OfficeOpenXml.ExcelRange,SigStat.Common.Helpers.Excel.ExcelColor,System.Boolean,System.Boolean)">
            <summary>
            Format cells in the range into a table
            </summary>
            <param name="range">The table's cells</param>
            <param name="color">Color palette of the table</param>
            <param name="showColumnHeader">Defines if the table has column header</param>
            <param name="showRowHeader">Defines if the table has row header</param>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.FormatAsTableWithTitle(OfficeOpenXml.ExcelRange,System.String,SigStat.Common.Helpers.Excel.ExcelColor,System.Boolean,System.Boolean)">
            <summary>
            Format cells in the range into a table with possible title
            </summary>
            <param name="range">The table's cells</param>
            <param name="title">The table's title, if null, the table won't have title</param>
            <param name="color">Color palette of the table</param>
            <param name="showColumnHeader">Defines if the table has column header</param>
            <param name="showRowHeader">Defines if the table has row header</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.InsertTable(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Object[0:,0:],System.String,SigStat.Common.Helpers.Excel.ExcelColor,System.Boolean,System.Boolean,System.String)">
            <summary>
            Insert table filled with data from a 2D array
            </summary>
            <param name="ws">Worksheet in wich the table is created</param>
            <param name="col">Starting column of the table</param>
            <param name="row">Starting row of the table</param>
            <param name="data">2D array in wich the data to insert is stored</param>
            <param name="title">The table's title</param>
            <param name="color">The table's color</param>
            <param name="hasRowHeader">Defines if the table has row header</param>
            <param name="hasColumnHeader">Defines if the table has column header</param>
            <param name="name">If given, creates a named range, with this name</param>
            /// <returns>Range of the inserted data</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.InsertTable(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Double[0:,0:],System.String,SigStat.Common.Helpers.Excel.ExcelColor,System.Boolean,System.Boolean,System.String)">
            <summary>
            Insert table filled with data from a 2D array
            </summary>
            <param name="ws">Worksheet in wich the table is created</param>
            <param name="col">Starting column of the table</param>
            <param name="row">Starting row of the table</param>
            <param name="data">2D array in wich the data to insert is stored (double values)</param>
            <param name="title">The table's title</param>
            <param name="color">The table's color</param>
            <param name="hasRowHeader">Defines if the table has row header</param>
            <param name="hasColumnHeader">Defines if the table has column header</param>
            /// <param name="name">If given, creates a named range, with this name</param>
            <returns>Range of the inserted data</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.InsertTable``1(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0},System.String,SigStat.Common.Helpers.Excel.ExcelColor,System.Boolean,System.String)">
            <summary>
            Insert a table filled with data from an IEnumerable
            </summary>
            <typeparam name="T">Type of inserted objects</typeparam>
            <param name="ws">Worksheet in wich the table is created</param>
            <param name="col">Starting column of the table</param>
            <param name="row">Starting row of the table</param>
            <param name="data">IEnumerable in wich the data to insert is stored</param>
            <param name="title">The table's title</param>
            <param name="color">The table's color</param>
            <param name="showHeader">Defines if the table has header</param>
            <param name="Name">If given, creates a named range, with this name</param>
             <returns>Range of the inserted data</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.InsertTable(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}},System.Collections.Generic.IEnumerable{System.String},System.String,SigStat.Common.Helpers.Excel.ExcelColor,System.String)">
            <summary>
            Insert a table filled with data from an IEnumerable
            </summary>
            <param name="ws">Worksheet in wich the table is created</param>
            <param name="col">Starting column of the table</param>
            <param name="row">Starting row of the table</param>
            <param name="data">IEnumerable in wich the data to insert is stored</param>
            <param name="title">The table's title</param>
            <param name="color">The table's color</param>
            <param name="headers">Defines if the table has header</param>
            <param name="name">If given, creates a named range, with this name</param>
             <returns>Range of the inserted data</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.InsertDictionary``2(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.String,SigStat.Common.Helpers.Excel.ExcelColor,System.String)">
            <summary>
            Insert table from key-value pairs
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="ws">Worksheet in wich the table is created</param>
            <param name="col">Starting column of the table</param>
            <param name="row">Starting row of the table</param>
            <param name="data">IEnumerable of key-value pairs in wich the data to insert is stored</param>
            <param name="title">The table's title</param>
            <param name="color">The table's color</param>
            <param name="Name">If given, creates a named range, with this name</param>
            <returns>Range of the inserted data</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.InsertHierarchicalList(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,SigStat.Common.Helpers.HierarchyElement,System.String,SigStat.Common.Helpers.Excel.ExcelColor)">
            <summary>
            Insert a hierarchical list in tree style into the worksheet
            </summary>
            <param name="ws">Worksheet in wich the list is inserted</param>
            <param name="col">Starting column of the list</param>
            <param name="row">Starting row of the list</param>
            <param name="root">Root element of the list</param>
            <param name="title">Title of the list</param>
            <param name="color">color of the list</param>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.InsertLegend(OfficeOpenXml.ExcelRange,System.String,System.String,SigStat.Common.Helpers.Excel.ExcelColor)">
            <summary>
            Insert legend
            </summary>
            <param name="range">Range of the legend</param>
            <param name="text">Text of the legend</param>
            <param name="title">Title of the legend (can be null)</param>
            <param name="color">Color of the legend</param>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.InsertLink(OfficeOpenXml.ExcelRange,System.String)">
            <summary>
            Creates a link to given sheet
            </summary>
            <param name="range">Cells to place the link in</param>
            <param name="sheet">Destination sheet's name</param>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.InsertLink(OfficeOpenXml.ExcelRange,System.String,System.String)">
            <summary>
            Creates a link to selected cells in given sheet
            </summary>
            <param name="range">Cells to place the link in</param>
            <param name="sheet">Destination sheet's name</param>
            <param name="cells">Destination cells' address</param>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.InsertLineChart(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelRange,System.Int32,System.Int32,System.String,System.String,System.String,OfficeOpenXml.ExcelRange,System.Int32,System.Int32,System.String)">
            <summary>
            Draws a line chart for the given data
            </summary>
            <param name="ws">Worksheet in wich the graph is inserted</param>
            <param name="range">Range containing the data (first row for x axis other rows for series)</param>
            <param name="col">The graph inserted starts at this column</param>
            <param name="row">The graph inserted starts at this row</param>
            <param name="name">Id and default title of the graph</param>
            <param name="xLabel">Label for x axis of the graph</param>
            <param name="yLabel">Label for y axis of the graph</param>
            <param name="SerieLabels">Label of the series</param>
            <param name="width">Graph's width in px</param>
            <param name="height">Graph's height in px</param>
            <param name="title">Title of the graph if the defauolt name has to be overwritten</param>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.InsertColumnChart(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelRange,System.Int32,System.Int32,System.String,System.String,System.String,OfficeOpenXml.ExcelRange,System.Int32,System.Int32,System.String)">
            <summary>
            Draws a column chart for the given data
            </summary>
            <param name="ws">Worksheet in wich the graph is inserted</param>
            <param name="range">Range containing the data (first row for x axis other rows for series)</param>
            <param name="col">The graph inserted starts at this column</param>
            <param name="row">The graph inserted starts at this row</param>
            <param name="name">Id and default title of the graph</param>
            <param name="xLabel">Label for x axis of the graph</param>
            <param name="yLabel">Label for y axis of the graph</param>
            <param name="serieLabels">If the graph hase more than one series, each can be named separately</param>
            <param name="width">Graph's width in px</param>
            <param name="height">Graph's height in px</param>
            <param name="title">Title of the graph if the defauolt name has to be overwritten</param>
        </member>
        <member name="M:SigStat.Common.Helpers.ExcelHelper.InsertText(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.String,SigStat.Common.Helpers.Excel.TextLevel)">
            <summary>
            Inserts text into the defined cell, and format to match text level
            </summary>
            <param name="ws">Worksheet in wich the text is inserted</param>
            <param name="row">Row of the cell</param>
            <param name="col">Column of the cell</param>
            <param name="text">Text to insert</param>
            <param name="level">Level of text</param>
        </member>
        <member name="T:SigStat.Common.Helpers.Excel.ExcelIgnoreAttribute">
            <summary>
            Ignores the marked property, when generating an Excel table from the class
            </summary>
        </member>
        <member name="T:SigStat.Common.Helpers.Excel.TextLevel">
            <summary>
            Paragraph style setting
            </summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Excel.TextLevel.Title">
            <summary>Main title</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Excel.TextLevel.Heading1">
            <summary>Level 1 heading</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Excel.TextLevel.Heading2">
            <summary>Level 2 heading</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Excel.TextLevel.Heading3">
            <summary>Level 3 heading</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Excel.TextLevel.Normal">
            <summary>Normal document body style</summary>
        </member>
        <member name="T:SigStat.Common.Helpers.Excel.Level">
            <summary>
            Helper class for applying text styling
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Excel.Level.StyleAs(OfficeOpenXml.Style.ExcelStyle,SigStat.Common.Helpers.Excel.TextLevel)">
            <summary>
            Set the style according to text level
            </summary>
            <param name="style"></param>
            <param name="level"></param>
        </member>
        <member name="T:SigStat.Common.Helpers.Excel.Palette">
            <summary>
            
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.Excel.Palette.MainColor">
            <summary>
            Gets or sets the main color used in the palette
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.Excel.Palette.DarkColor">
            <summary>
            Gets or sets the color for rendering darker elements
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.Excel.Palette.LightColor">
            <summary>
            Gets or sets the color for rendering bright elements
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Excel.Palette.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Helpers.Excel.Palette"/> class.
            </summary>
            <param name="main">The main color</param>
            <param name="dark">The dark color</param>
            <param name="light">The light color</param>
        </member>
        <member name="T:SigStat.Common.Helpers.Excel.ExcelColor">
            <summary>
            Predefined color schemes for Excel
            </summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Excel.ExcelColor.Primary">
            <summary>Primary color</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Excel.ExcelColor.Secondary">
            <summary>Secondary color</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Excel.ExcelColor.Succes">
            <summary>Succes color</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Excel.ExcelColor.Danger">
            <summary>Danger color</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Excel.ExcelColor.Warning">
            <summary>Warning color</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Excel.ExcelColor.Info">
            <summary>Info color</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Excel.ExcelColor.Transparent">
            <summary>Transparent color</summary>
        </member>
        <member name="T:SigStat.Common.Helpers.Excel.PaletteStorage">
            <summary>
            Stores color information for every ExcelColor
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Excel.PaletteStorage.GetPalette(SigStat.Common.Helpers.Excel.ExcelColor)">
            <summary>
            Get the Palette assigned to the color
            </summary>
            <param name="excelColor"></param>
            <returns>The specified palette</returns>
        </member>
        <member name="T:SigStat.Common.Helpers.HierarchyElement">
            <summary>
            Hierarchical structure to store object
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.HierarchyElement.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.HierarchyElement.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.HierarchyElement.#ctor">
            <summary>
            Create an emty element
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.HierarchyElement.#ctor(System.Object)">
            <summary>
            Create a new element with content
            </summary>
            <param name="Content">Content of the new element</param>
        </member>
        <member name="M:SigStat.Common.Helpers.HierarchyElement.Add(SigStat.Common.Helpers.HierarchyElement)">
            <summary>
            Adds the specified element as a child
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.HierarchyElement.GetDepth">
            <summary>
            Return the hierarchy's depth from this node
            </summary>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.HierarchyElement.GetCount">
            <summary>
            Returns number of elements under this node and itself
            </summary>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.HierarchyElement.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SigStat.Common.Helpers.HierarchyElement.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:SigStat.Common.Helpers.IProgress">
            <summary>
            Enables progress tracking by expsoing the <see cref="P:SigStat.Common.Helpers.IProgress.Progress"/> property and the <see cref="E:SigStat.Common.Helpers.IProgress.ProgressChanged"/> event.
            </summary>
        </member>
        <member name="E:SigStat.Common.Helpers.IProgress.ProgressChanged">
            <summary>
            Invoked whenever the <see cref="P:SigStat.Common.Helpers.IProgress.Progress"/> property is changed.
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.IProgress.Progress">
            <summary>
            Gets the current progress in percentage.
            </summary>
        </member>
        <member name="T:SigStat.Common.Helpers.ProgressHelper">
            <summary>
            A helper class for tracking progress of an operation. 
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.ProgressHelper.Maximum">
            <summary>
            The total number of individual items to be processed.
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.ProgressHelper.Value">
            <summary>
            The actual number of processed items.
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.ProgressHelper.ReportIntervallSeconds">
            <summary>
            If larger than 0, ReportProgress event will be executed periodically after ReportIntervallSeconds when the <see cref="P:SigStat.Common.Helpers.ProgressHelper.Value"/> property changes. 
            </summary>
        </member>
        <member name="E:SigStat.Common.Helpers.ProgressHelper.ReportProgress">
            <summary>
            Event will be executed periodically after <see cref="P:SigStat.Common.Helpers.ProgressHelper.ReportIntervallSeconds"/> when the <see cref="P:SigStat.Common.Helpers.ProgressHelper.Value"/> property changes. 
            </summary>
            <remarks>If <see cref="P:SigStat.Common.Helpers.ProgressHelper.ReportIntervallSeconds"/> is set to 0, this event will be suppressed</remarks>
        </member>
        <member name="P:SigStat.Common.Helpers.ProgressHelper.Elapsed">
            <summary>
            Gets the total elapsed time measured by the current instance.
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.ProgressHelper.Eta">
            <summary>
            Gets the estimated time of completion assuming linear progress.
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.ProgressHelper.Remaining">
            <summary>
            Gets the estimated remaining time till completion assuming linear progress.
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.ProgressHelper.#ctor">
            <summary>
            Initializes an instance of <see cref="T:SigStat.Common.Helpers.ProgressHelper"/>
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.ProgressHelper.StartNew(System.Int32,System.Int32,System.Action{SigStat.Common.Helpers.ProgressHelper},System.Action{System.String})">
            <summary>
            Initializes an instance of <see cref="T:SigStat.Common.Helpers.ProgressHelper"/> with the given parameters. Make sure to manually set the <see cref="P:SigStat.Common.Helpers.ProgressHelper.Value"/> property during operation.
            </summary>
            <param name="maximum">The total number of individual items to be processed.</param>
            <param name="reportIntervallSeconds">If larger than 0, ReportProgress event will be executed periodically after ReportIntervallSeconds when the <see cref="P:SigStat.Common.Helpers.ProgressHelper.Value"/> property changes. </param>
            <param name="reportProgress"></param>
            <param name="logAction">Logging action. E.g. Console.WriteLine()</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.ProgressHelper.IncrementValue">
            <summary>
            Increments <see cref="P:SigStat.Common.Helpers.ProgressHelper.Value"/> by 1.
            </summary>
            <remarks>The operation is thread safe.</remarks>
        </member>
        <member name="M:SigStat.Common.Helpers.ProgressHelper.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Helpers.Serialization.DistanceFunctionJsonConverter">
            <summary>
            Helper class for serializing distance functions
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.DistanceFunctionJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Func{System.Double[],System.Double[],System.Double},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.DistanceFunctionJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Func{System.Double[],System.Double[],System.Double},Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Helpers.Serialization.DistanceMatrixConverter">
            <summary>
            Serializes/Deserializes a <see cref="T:SigStat.Common.DistanceMatrix`3"/> object using its ToArray() and FromArray() methods.
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.DistanceMatrixConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,SigStat.Common.DistanceMatrix{System.String,System.String,System.Double},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.DistanceMatrixConverter.WriteJson(Newtonsoft.Json.JsonWriter,SigStat.Common.DistanceMatrix{System.String,System.String,System.Double},Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Helpers.Serialization.FeatureDescriptorDictionaryConverter">
            <summary>
            Custom serializer for a Dictionary of <see cref="T:SigStat.Common.FeatureDescriptor"/>
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.FeatureDescriptorDictionaryConverter.CanConvert(System.Type)">
            <summary>
            Tells if the current object is of the correct type
            </summary>
            <param name="objectType">The type of the object</param>
            <returns>If the object can be converted or not</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.FeatureDescriptorDictionaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Overwrite of the <see cref="T:Newtonsoft.Json.JsonConverter"/> method
            Deserializes the dictionary of <see cref="T:SigStat.Common.FeatureDescriptor"/> created by the this class
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.FeatureDescriptorDictionaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Overwrite of the <see cref="T:Newtonsoft.Json.JsonConverter"/> method
            Serializes the dictionary <see cref="T:SigStat.Common.FeatureDescriptor"/> with type of the descriptor
            </summary>
        </member>
        <member name="T:SigStat.Common.Helpers.Serialization.FeatureDescriptorListJsonConverter">
            <summary>
            Custom serializer for lists containing <see cref="T:SigStat.Common.FeatureDescriptor"/> or  <see cref="T:SigStat.Common.FeatureDescriptor`1"/> objects
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.FeatureDescriptorListJsonConverter.CanConvert(System.Type)">
            <summary>
            Tells if the current object is of the correct type
            </summary>
            <param name="objectType">The type of the object</param>
            <returns>If the object can be converted or not</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.FeatureDescriptorListJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Overwrite of the <see cref="T:Newtonsoft.Json.JsonConverter"/> method
            Deserializes the list of <see cref="T:SigStat.Common.FeatureDescriptor"/> objects
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.FeatureDescriptorListJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Overwrite of the <see cref="T:Newtonsoft.Json.JsonConverter"/> method
            Serializes the list of <see cref="T:SigStat.Common.FeatureDescriptor"/> objects to json
            </summary>
        </member>
        <member name="T:SigStat.Common.Helpers.Serialization.FeatureStreamingContextState">
            <summary>
            SerializationContext for serializing SigStat objects
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.FeatureStreamingContextState.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.Serialization.FeatureStreamingContextState.KnownFeatureKeys">
            <summary>
            A list of already serialized FeatureDescriptor keys
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.Serialization.FeatureStreamingContextState.CompactFeatures">
            <summary>
            Set to true to use compact feature notation
            </summary>
        </member>
        <member name="T:SigStat.Common.Helpers.Serialization.KeyValueGroupConverter">
            <summary>
            Serializes / Deserializes a logging dictionary <see cref="T:SigStat.Common.Logging.KeyValueGroup"/>
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.KeyValueGroupConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,SigStat.Common.Logging.KeyValueGroup,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.KeyValueGroupConverter.WriteJson(Newtonsoft.Json.JsonWriter,SigStat.Common.Logging.KeyValueGroup,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Helpers.Serialization.RectangleFConverter">
            <summary>
            Custom serializer for <see cref="T:System.Drawing.RectangleF"/> objects
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.RectangleFConverter.CanConvert(System.Type)">
            <summary>
            Tells if the current object is of the correct type
            </summary>
            <param name="objectType">The type of the object</param>
            <returns>If the object can be converted or not</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.RectangleFConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Overwrite of the <see cref="T:Newtonsoft.Json.JsonConverter"/> method
            Deserializes the <see cref="T:System.Drawing.RectangleF"/> json created by the same class
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.RectangleFConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Overwrite of the <see cref="T:Newtonsoft.Json.JsonConverter"/> method
            Serializes the <see cref="T:System.Drawing.RectangleF"/> to json
            </summary>
        </member>
        <member name="T:SigStat.Common.Helpers.Serialization.VerifierResolver">
            <summary>
            Custom resolver for customizing the json serialization 
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.VerifierResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Decides if the current property should be serialized or not
            </summary>
            <param name="type">The type of the current property</param>
            <param name="memberSerialization">The type of member serialization in Json.NET</param>
            <returns>A bool</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.Serialization.VerifierResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Selects which JsonConverter should be used for the property
            </summary>
            <param name="member">A  <see cref="T:System.Reflection.MemberInfo"/></param>
            <param name="memberSerialization">The type of member serialization in Json.NET</param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Helpers.FeatureDescriptorJsonConverter">
            <summary>
            Custom serializer for <see cref="T:SigStat.Common.FeatureDescriptor"/> objects
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.FeatureDescriptorJsonConverter.CanConvert(System.Type)">
            <summary>
            Tells if the current object is of the correct type
            </summary>
            <param name="objectType">The type of the object</param>
            <returns>If the object can be converted or not</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.FeatureDescriptorJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Overwrite of the <see cref="T:Newtonsoft.Json.JsonConverter"/> method
            Deserializes the <see cref="T:SigStat.Common.FeatureDescriptor"/> json created by the this class
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.FeatureDescriptorJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Overwrite of the <see cref="T:Newtonsoft.Json.JsonConverter"/> method
            Serializes the <see cref="T:SigStat.Common.FeatureDescriptor"/> to json with type depending on if it was serialized earlier or not
            </summary>
        </member>
        <member name="T:SigStat.Common.Helpers.FeatureDescriptorTJsonConverter">
            <summary>
            Custom serializer for <see cref="T:SigStat.Common.FeatureDescriptor`1"/> objects
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.FeatureDescriptorTJsonConverter.CanConvert(System.Type)">
            <summary>
            Tells if the current object is of the correct type
            </summary>
            <param name="objectType">The type of the object</param>
            <returns>If the object can be converted or not</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.FeatureDescriptorTJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Overwrite of the <see cref="T:Newtonsoft.Json.JsonConverter"/> method
            Deserializes the <see cref="T:SigStat.Common.FeatureDescriptor`1"/> json created by the this class
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.FeatureDescriptorTJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Overwrite of the <see cref="T:Newtonsoft.Json.JsonConverter"/> method
            Serializes the <see cref="T:SigStat.Common.FeatureDescriptor`1"/> to json with type depending on if it was serialized earlier or not
            </summary>
        </member>
        <member name="T:SigStat.Common.Helpers.SerializationHelper">
            <summary>
            Json serialization and deserialization using the custom resolver  <see cref="T:SigStat.Common.Helpers.Serialization.VerifierResolver"/>
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.SerializationHelper.GetSettings(System.Boolean)">
            <summary>
            Settings used for the serialization methods
            </summary>
            <returns>A new settings object</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.SerializationHelper.Deserialize``1(System.String)">
            <summary>
            Constructs object from strings that were serialized previously
            </summary>
            <typeparam name="T">A type which has a public parameterless constructor</typeparam>
            <param name="s">The serialized string</param>
            <returns>The object that was serialized</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.SerializationHelper.DeserializeFromFile``1(System.String)">
            <summary>
            Constructs object from file given by a path
            </summary>
            <typeparam name="T">A type which has a public parameterless constructor</typeparam>
            <param name="path">Relative path to the file</param>
            <returns>The object that was serialized to the file</returns>
        </member>
        <member name="M:SigStat.Common.Helpers.SerializationHelper.JsonSerializeToFile``1(``0,System.String,System.Boolean)">
            <summary>
            Writes object to file to the given by path in json format
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="o">The object</param>
            <param name="path">Relative path</param>
            <param name="compactFeatures">Set to true to use compact feature notation</param>
        </member>
        <member name="M:SigStat.Common.Helpers.SerializationHelper.JsonSerialize``1(``0,System.Boolean)">
            <summary>
            Creates json string from object
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="o">The object</param>
            <param name="compactFeatures">Set to true to use compact feature notation</param>
            <returns>The json string constructed from the object</returns>
        </member>
        <member name="T:SigStat.Common.Helpers.SignerStatisticsHelper">
            <summary>
            Calculates general statistics of the signatures of a given signer
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.SignerStatisticsHelper.GetLengthAverage(SigStat.Common.Signer)">
            <summary>
            Return the average od signatures points number
            </summary>
            <param name="signer"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.SignerStatisticsHelper.GetWidthAvg(SigStat.Common.Signer)">
            <summary>
            Return signer width average
            </summary>
            <param name="signer"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.SignerStatisticsHelper.GetHeightAvg(SigStat.Common.Signer)">
            <summary>
            return signer height average
            </summary>
            <param name="signer"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.SignerStatisticsHelper.GetPointsAvg(SigStat.Common.Signer)">
            <summary>
            return signer points average
            </summary>
            <param name="signer"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.SignerStatisticsHelper.GetMinSignaturePoints(SigStat.Common.Signer)">
            <summary>
            return the min signature points number of a signer
            </summary>
            <param name="signer"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Helpers.SignerStatisticsHelper.GetMaxSignaturePoints(SigStat.Common.Signer)">
            <summary>
            return the min signature points number of a signer
            </summary>
            <param name="signer"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.DistanceMatrix`3">
            <summary>
            A Sparse Matrix representation of a distance graph.
            </summary>
            <typeparam name="TRowKey">Type to represent the row indexes</typeparam>
            <typeparam name="TColumnKey">Type to represent the column indexes</typeparam>
            <typeparam name="TValue">Type to represent the distances</typeparam>
        </member>
        <member name="M:SigStat.Common.DistanceMatrix`3.GetDistance(`0,`1)">
            <summary>
            Gets or sets a distance for a given row and column
            </summary>
            <param name="row">row</param>
            <param name="column">column</param>
            <returns></returns>
        </member>
        <member name="P:SigStat.Common.DistanceMatrix`3.Item(`0,`1)">
            <summary>
            Gets or sets a distance for a given row and column
            </summary>
            <param name="row">row</param>
            <param name="column">column</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.DistanceMatrix`3.TryGetValue(`0,`1,`2@)">
            <summary>
             Gets the value associated with the specified keys. 
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns>true if the Matrix contains an element with the specified keys; otherwise, false.</returns>
        </member>
        <member name="M:SigStat.Common.DistanceMatrix`3.ContainsKey(`0,`1)">
            <summary>
            Determines whether the Matrix contains the specified key pair
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns>true if the Matrix contains an element with the specified keys; otherwise, false.</returns>
        </member>
        <member name="M:SigStat.Common.DistanceMatrix`3.ToArray">
            <summary>
            Generates a two dimensional array representation of the Matrix
            </summary>
            <returns>a two dimensional array representation of the Matrix, where the first row and column contain the corresponding row and column indexes</returns>
        </member>
        <member name="M:SigStat.Common.DistanceMatrix`3.GetValues">
            <summary>
            Enumerates all values stored on the Matrix
            </summary>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.ErrorRate">
            <summary>
            Represents the ErrorRates achieved in a benchmark
            </summary>
        </member>
        <member name="P:SigStat.Common.ErrorRate.Far">
            <summary>
            False Acceptance Rate
            </summary>
        </member>
        <member name="P:SigStat.Common.ErrorRate.Frr">
            <summary>
            False Rejection Rate
            </summary>
        </member>
        <member name="P:SigStat.Common.ErrorRate.Aer">
            <summary>
            Average Error Rate (calculated from Far and Frr)
            </summary>
        </member>
        <member name="M:SigStat.Common.ErrorRate.Equals(SigStat.Common.ErrorRate)">
            <summary>
            Checks for equality of double values 
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.IOExtensions">
            <summary>
            Extension methods for common IO operations
            </summary>
        </member>
        <member name="M:SigStat.Common.IOExtensions.GetPath(System.String)">
            <summary>
            Gets the given relative or absolute path in a platform neutral form
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:SigStat.Common.MathHelper">
            <summary>
            Common mathematical functions used by the SigStat framework
            </summary>
        </member>
        <member name="M:SigStat.Common.MathHelper.Min(System.Double,System.Double,System.Double)">
            <summary>
            Returns the smallest of the three double parameters
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <param name="d3"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.MathHelper.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the median of the given data series
            </summary>
            <param name="values">The data series</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.MathHelper.StdDiviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            return standard diviation of a feature values
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.MathHelper.EqualsZero(System.Double)">
            <summary>
            Return true if the argument falls into the [-double.Epsilon,double.Epsilon] range
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.SignatureHelper">
            <summary>
            Helper functions for the management of signatures
            </summary>
        </member>
        <member name="M:SigStat.Common.SignatureHelper.SaveImage(SigStat.Common.Signature,System.String)">
            <summary>
            Save online signature as file
            </summary>
            <param name="sig"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:SigStat.Common.SignatureHelper.GetSignatureLength(SigStat.Common.Signature)">
            <summary>
            Return the signature length using Eculidan distance
            </summary>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.StrokeHelper">
            <summary>
            Helper class for locating and manipulating strokes in an online signature
            </summary>
        </member>
        <member name="M:SigStat.Common.StrokeHelper.GetStrokes(SigStat.Common.Signature)">
            <summary>
            Gets the strokes from an online signature with standard features. Note that
            the signature has to contain <see cref="F:SigStat.Common.Features.T"/> and <see cref="F:SigStat.Common.Features.Pressure"/>
            </summary>
            <param name="signature">An online signature with standard features</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.StrokeHelper.GetStroke(System.Int32,System.Double)">
            <summary>
            Creates a <see cref="T:SigStat.Common.StrokeInterval"/> and initializes it with the given parameters
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="pressure">The pressure.</param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.StrokeInterval">
            <summary>
            Represents a stroke in an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.StrokeInterval.StartIndex">
            <summary>
            The index of the firs element
            </summary>
        </member>
        <member name="P:SigStat.Common.StrokeInterval.EndIndex">
            <summary>
            The index of the last element
            </summary>
        </member>
        <member name="P:SigStat.Common.StrokeInterval.StrokeType">
            <summary>
            The <see cref="P:SigStat.Common.StrokeInterval.StrokeType"/> of the stroke.
            </summary>
        </member>
        <member name="M:SigStat.Common.StrokeInterval.#ctor(System.Int32,System.Int32,SigStat.Common.StrokeType)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.StrokeInterval"/> struct.
            </summary>
            <param name="startIndex">The index of the firs element</param>
            <param name="endIndex">The index of the last element</param>
            <param name="strokeType">Type of the stroke.</param>
        </member>
        <member name="T:SigStat.Common.StrokeType">
            <summary>
            Describes the type of a stroke
            </summary>
        </member>
        <member name="F:SigStat.Common.StrokeType.Unknown">
            <summary>
            The type of the stroke is not known
            </summary>
        </member>
        <member name="F:SigStat.Common.StrokeType.Up">
            <summary>
            The stroke was made in the air (the pen did not tuch the tablet/paper)
            </summary>
        </member>
        <member name="F:SigStat.Common.StrokeType.Down">
            <summary>
            The stroke was made on the writing surface (tablet, paper etc.)
            </summary>
        </member>
        <member name="T:SigStat.Common.Loaders.DataSetLoader">
            <summary>
            Abstract loader class to inherit from. Implements ILogger.
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.DataSetLoader.Logger">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Loaders.DataSetLoader.EnumerateSigners">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Loaders.DataSetLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc/>
        </member>
        <member name="P:SigStat.Common.Loaders.DataSetLoader.SamplingFrequency">
            <summary>
            Sampling frequency for each database
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.DataSetLoader.SigStat#Common#Loaders#IDataSetLoader#SignerFilter">
            <summary>
            Ignores any signers during the loading, that do not match the predicate
            </summary>
        </member>
        <member name="T:SigStat.Common.Loaders.IDataSetLoader">
            <summary>
            Exposes a function to enable loading collections of <see cref="T:SigStat.Common.Signer"/>s.
            Base abstract class: <see cref="T:SigStat.Common.Loaders.DataSetLoader"/>.
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.IDataSetLoader.SignerFilter">
            <summary>
            Ignores any signers during the loading, that do not match the predicate
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.IDataSetLoader.EnumerateSigners">
            <summary>
            Enumerates all signers of the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Loaders.IDataSetLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <summary>
            Enumerates all <see cref="T:SigStat.Common.Signer"/>s that match the <paramref name="signerFilter"/>.
            </summary>
            <param name="signerFilter">Filter to specify which Signers to load. Example: (p=>p=="01")</param>
            <returns>Collection of <see cref="T:SigStat.Common.Signer"/>s that match the <paramref name="signerFilter"/></returns>
        </member>
        <member name="T:SigStat.Common.Loaders.ImageLoader">
            <summary>
            DataSetLoader for Image type databases.
            Similar format to Svc2004Loader, but finds png images.
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.ImageLoader.SamplingFrequency">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Loaders.ImageLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.ImageLoader"/> class with specified database.
            </summary>
            <param name="databasePath">File path to the database.</param>
        </member>
        <member name="M:SigStat.Common.Loaders.ImageLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Loaders.ImageLoader.LoadSignature(System.String)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Loaders.ImageLoader.LoadImage(SigStat.Common.Signature,System.String)">
            <summary>
            Load one image.
            </summary>
            <param name="signature">The signature that receives the new <see cref="F:SigStat.Common.Features.Image"/></param>
            <param name="file">File path to the image to be loaded.</param>
        </member>
        <member name="T:SigStat.Common.Loaders.ImageSaver">
            <summary>
            Get the <see cref="F:SigStat.Common.Features.Image"/> of a <see cref="T:SigStat.Common.Signature"/> and save it as png file.
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.ImageSaver.Save(SigStat.Common.Signature,System.String)">
            <summary>
            Saves a png image file to the specified <paramref name="path"/>.
            </summary>
            <param name="signature">Input signature containing <see cref="F:SigStat.Common.Features.Image"/>.</param>
            <param name="path">Output file path of the png image.</param>
        </member>
        <member name="T:SigStat.Common.Loaders.MCYTLoader">
            <summary>
            <see cref="T:SigStat.Common.Loaders.DataSetLoader"/> for the MCYT dataset
            </summary>
        </member>
        <member name="T:SigStat.Common.Loaders.MCYTLoader.MCYT">
            <summary>
            Set of features containing raw data loaded from MCYT-format database.
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.MCYTLoader.MCYT.X">
            <summary>
            X cooridnates from the online signature imported from the MCYT database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.MCYTLoader.MCYT.Y">
            <summary>
            Y cooridnates from the online signature imported from the MCYT database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.MCYTLoader.MCYT.Azimuth">
            <summary>
            Azimuth values from the online signature imported from the MCYT database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.MCYTLoader.MCYT.Altitude">
            <summary>
            Altitude values from the online signature imported from the MCYT database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.MCYTLoader.MCYT.Pressure">
            <summary>
            Pressure values from the online signature imported from the MCYT database
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.MCYTLoader.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.MCYTLoader"/> class.
            </summary>
            <param name="databasePath">The database path.</param>
            <param name="standardFeatures">if set to <c>true</c> features will be also stored in <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="M:SigStat.Common.Loaders.MCYTLoader.#ctor(System.String,System.Boolean,System.Predicate{SigStat.Common.Signer})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.MCYTLoader"/> class with specified database.
            </summary>
            <param name="databasePath">Represents the path, to load the signatures from. It supports two basic approaches:
            <list type="bullet">
            <item>DatabasePath may point to a (non password protected) zip file, containing the siganture files</item>
            <item>DatabasePath may point to a directory with all the signer files or with files grouped in subdirectories</item>
            </list></param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
            <param name="signerFilter">Sets the <see cref="P:SigStat.Common.Loaders.MCYTLoader.SignerFilter"/> property</param>
        </member>
        <member name="P:SigStat.Common.Loaders.MCYTLoader.SamplingFrequency">
            <summary>
            Set MCYT sampling frequenct to 100hz
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.MCYTLoader.DatabasePath">
            <summary>
            Gets or sets the database path.
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.MCYTLoader.StandardFeatures">
            <summary>
            Gets or sets a value indicating whether features are also loaded as <see cref="T:SigStat.Common.Features"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.MCYTLoader.SignerFilter">
            <summary>
            Ignores any signers during the loading, that do not match the predicate
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.MCYTLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc />
        </member>
        <member name="M:SigStat.Common.Loaders.MCYTLoader.LoadSignature(SigStat.Common.Signature,System.IO.MemoryStream,System.Boolean)">
            <summary>
            Loads one signature from specified stream.
            </summary>
            <remarks>
            Based on Mohammad's MCYT reader.
            </remarks>
            <param name="signature">Signature to write features to.</param>
            <param name="stream">Stream to read MCYT data from.</param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="T:SigStat.Common.Loaders.MemoryDataSetLoader">
            <summary>
            Stores and enumerates Signer data that has already been loaded
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.MemoryDataSetLoader.SamplingFrequency">
             <inheritdoc/>
        </member>
        <member name="P:SigStat.Common.Loaders.MemoryDataSetLoader.DatabasePath">
            <summary>
            Gets or sets the database path.
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.MemoryDataSetLoader.StandardFeatures">
            <summary>
            Gets or sets a value indicating whether features are also loaded as <see cref="T:SigStat.Common.Features"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.MemoryDataSetLoader.SignerFilter">
            <summary>
            Ignores any signers during the loading, that do not match the predicate
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.MemoryDataSetLoader.#ctor(System.Collections.Generic.IEnumerable{SigStat.Common.Signer})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.Svc2004Loader"/> class with specified database.
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.MemoryDataSetLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Loaders.SigComp11ChineseLoader">
            <summary>
            <see cref="T:SigStat.Common.Loaders.DataSetLoader"/> for the SigComp11Chinese dataset
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp11ChineseLoader.SamplingFrequency">
            <summary>
            Sampling Frequency of this database
            </summary>
        </member>
        <member name="T:SigStat.Common.Loaders.SigComp11ChineseLoader.SigComp11Ch">
            <summary>
            Set of features containing raw data loaded from SigComp11Chinese-format database.
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp11ChineseLoader.SigComp11Ch.X">
            <summary>
            X cooridnates from the online signature imported from the SigComp11Chinese database  
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp11ChineseLoader.SigComp11Ch.Y">
            <summary>
            Y cooridnates from the online signature imported from the SigComp11Chinese database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp11ChineseLoader.SigComp11Ch.P">
            <summary>
            Z cooridnates from the online signature imported from the SigComp11Chinese database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp11ChineseLoader.SigComp11Ch.T">
            <summary>
            T values from the online signature imported from the SigComp11Chinese database
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp11ChineseLoader.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.SigComp11ChineseLoader"/> class.
            </summary>
            <param name="databasePath">The database path.</param>
            <param name="standardFeatures">if set to <c>true</c> features will be also stored in <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp11ChineseLoader.#ctor(System.String,System.Boolean,System.Predicate{SigStat.Common.Signer})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.SigComp11ChineseLoader"/> class with specified database.
            </summary>
            <param name="databasePath">Represents the path, to load the signatures from. It supports two basic approaches:
            <list type="bullet">
            <item>DatabasePath may point to a (non password protected) zip file, containing the siganture files</item>
            <item>DatabasePath may point to a directory with all the signer files or with files grouped in subdirectories</item>
            </list></param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
            <param name="signerFilter">Sets the <see cref="P:SigStat.Common.Loaders.SigComp11ChineseLoader.SignerFilter"/> property</param>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp11ChineseLoader.DatabasePath">
            <summary>
            Gets or sets the database path.
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp11ChineseLoader.StandardFeatures">
            <summary>
            Gets or sets a value indicating whether features are also loaded as <see cref="T:SigStat.Common.Features"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp11ChineseLoader.SignerFilter">
            <summary>
            Ignores any signers during the loading, that do not match the predicate
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp11ChineseLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc />
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp11ChineseLoader.LoadSignature(SigStat.Common.Signature,System.IO.MemoryStream,System.Boolean)">
            <summary>
            Loads one signature from specified stream.
            </summary>
            <remarks>
            Based on Mohammad's MCYT reader.
            </remarks>
            <param name="signature">Signature to write features to.</param>
            <param name="stream">Stream to read MCYT data from.</param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="T:SigStat.Common.Loaders.SigComp11DutchLoader">
            <summary>
            <see cref="T:SigStat.Common.Loaders.DataSetLoader"/> for the SigComp11Dutch dataset
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp11DutchLoader.SamplingFrequency">
            <summary>
            Sampling Frequency of this database
            </summary>
        </member>
        <member name="T:SigStat.Common.Loaders.SigComp11DutchLoader.SigComp11">
            <summary>
            Set of features containing raw data loaded from MCYT-format database.
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp11DutchLoader.SigComp11.X">
            <summary>
            X cooridnates from the online signature imported from the MCYT database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp11DutchLoader.SigComp11.Y">
            <summary>
            Y cooridnates from the online signature imported from the MCYT database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp11DutchLoader.SigComp11.Z">
            <summary>
            Z cooridnates from the online signature imported from the MCYT database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp11DutchLoader.SigComp11.T">
            <summary>
            T values from the online signature imported from the SVC2004 database
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp11DutchLoader.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.SigComp11DutchLoader"/> class.
            </summary>
            <param name="databasePath">The database path.</param>
            <param name="standardFeatures">if set to <c>true</c> features will be also stored in <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp11DutchLoader.#ctor(System.String,System.Boolean,System.Predicate{SigStat.Common.Signer})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.SigComp11DutchLoader"/> class with specified database.
            </summary>
            <param name="databasePath">Represents the path, to load the signatures from. It supports two basic approaches:
            <list type="bullet">
            <item>DatabasePath may point to a (non password protected) zip file, containing the siganture files</item>
            <item>DatabasePath may point to a directory with all the signer files or with files grouped in subdirectories</item>
            </list></param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
            <param name="signerFilter">Sets the <see cref="P:SigStat.Common.Loaders.SigComp11DutchLoader.SignerFilter"/> property</param>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp11DutchLoader.DatabasePath">
            <summary>
            Gets or sets the database path.
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp11DutchLoader.StandardFeatures">
            <summary>
            Gets or sets a value indicating whether features are also loaded as <see cref="T:SigStat.Common.Features"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp11DutchLoader.SignerFilter">
            <summary>
            Ignores any signers during the loading, that do not match the predicate
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp11DutchLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc />
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp11DutchLoader.LoadSignature(SigStat.Common.Signature,System.IO.MemoryStream,System.Boolean)">
            <summary>
            Loads one signature from specified stream.
            </summary>
            <remarks>
            Based on Mohammad's MCYT reader.
            </remarks>
            <param name="signature">Signature to write features to.</param>
            <param name="stream">Stream to read MCYT data from.</param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="T:SigStat.Common.Loaders.SigComp13JapaneseLoader">
            <summary>
            <see cref="T:SigStat.Common.Loaders.DataSetLoader"/> for the SigComp13Japanese dataset
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp13JapaneseLoader.SamplingFrequency">
            <summary>
            Sampling Frequency of this database
            </summary>
        </member>
        <member name="T:SigStat.Common.Loaders.SigComp13JapaneseLoader.SigComp13Japanese">
            <summary>
            Set of features containing raw data loaded from SigComp13Japanese-format database.
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp13JapaneseLoader.SigComp13Japanese.X">
            <summary>
            X cooridnates from the online signature imported from the SigComp13Japanese database  
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp13JapaneseLoader.SigComp13Japanese.Y">
            <summary>
            Y cooridnates from the online signature imported from the SigComp13Japanese database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp13JapaneseLoader.SigComp13Japanese.P">
            <summary>
            Z cooridnates from the online signature imported from the SigComp13Japanese database (100 - pen down, 0 - pen up)
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp13JapaneseLoader.SigComp13Japanese.T">
            <summary>
            Generated T values from the online signature imported from the SigComp13Japanese database
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp13JapaneseLoader.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.SigComp13JapaneseLoader"/> class.
            </summary>
            <param name="databasePath">The database path.</param>
            <param name="standardFeatures">if set to <c>true</c> features will be also stored in <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp13JapaneseLoader.#ctor(System.String,System.Boolean,System.Predicate{SigStat.Common.Signer})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.SigComp13JapaneseLoader"/> class with specified database.
            </summary>
            <param name="databasePath">Represents the path, to load the signatures from. It supports two basic approaches:
            <list type="bullet">
            <item>DatabasePath may point to a (non password protected) zip file, containing the siganture files</item>
            <item>DatabasePath may point to a directory with all the signer files or with files grouped in subdirectories</item>
            </list></param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
            <param name="signerFilter">Sets the <see cref="P:SigStat.Common.Loaders.SigComp13JapaneseLoader.SignerFilter"/> property</param>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp13JapaneseLoader.DatabasePath">
            <summary>
            Gets or sets the database path.
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp13JapaneseLoader.StandardFeatures">
            <summary>
            Gets or sets a value indicating whether features are also loaded as <see cref="T:SigStat.Common.Features"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp13JapaneseLoader.SignerFilter">
            <summary>
            Ignores any signers during the loading, that do not match the predicate
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp13JapaneseLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc />
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp13JapaneseLoader.LoadSignature(SigStat.Common.Signature,System.IO.MemoryStream,System.Boolean)">
            <summary>
            Loads one signature from specified stream.
            </summary>
            <remarks>
            Based on Mohammad's MCYT reader.
            </remarks>
            <param name="signature">Signature to write features to.</param>
            <param name="stream">Stream to read SigComp13Japanese data from.</param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="T:SigStat.Common.Loaders.SigComp15GermanLoader">
            <summary>
            <see cref="T:SigStat.Common.Loaders.DataSetLoader"/> for the SigComp15German dataset
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp15GermanLoader.SamplingFrequency">
            <summary>
            Sampling Frequency of this database
            </summary>
        </member>
        <member name="T:SigStat.Common.Loaders.SigComp15GermanLoader.SigComp15">
            <summary>
            Set of features containing raw data loaded from SigComp15German-format database.
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp15GermanLoader.SigComp15.X">
            <summary>
            X cooridnates from the online signature imported from the SigComp15German database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp15GermanLoader.SigComp15.Y">
            <summary>
            Y cooridnates from the online signature imported from the SigComp15German database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp15GermanLoader.SigComp15.P">
            <summary>
            Z cooridnates from the online signature imported from the SigComp15German database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp15GermanLoader.SigComp15.T">
            <summary>
            T values from the online signature imported from the SigComp15German database
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp15GermanLoader.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.SigComp15GermanLoader"/> class.
            </summary>
            <param name="databasePath">The database path.</param>
            <param name="standardFeatures">if set to <c>true</c> features will be also stored in <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp15GermanLoader.#ctor(System.String,System.Boolean,System.Predicate{SigStat.Common.Signer})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.SigComp15GermanLoader"/> class with specified database.
            </summary>
            <param name="databasePath">Represents the path, to load the signatures from. It supports two basic approaches:
            <list type="bullet">
            <item>DatabasePath may point to a (non password protected) zip file, containing the siganture files</item>
            <item>DatabasePath may point to a directory with all the signer files or with files grouped in subdirectories</item>
            </list></param>
            <param name="standardFeatures">Convert loaded data  to standard <see cref="T:SigStat.Common.Features"/>.</param>
            <param name="signerFilter">Sets the <see cref="P:SigStat.Common.Loaders.SigComp15GermanLoader.SignerFilter"/> property</param>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp15GermanLoader.DatabasePath">
            <summary>
            Gets or sets the database path.
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp15GermanLoader.StandardFeatures">
            <summary>
            Gets or sets a value indicating whether features are also loaded as <see cref="T:SigStat.Common.Features"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp15GermanLoader.SignerFilter">
            <summary>
            Ignores any signers during the loading, that do not match the predicate
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp15GermanLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc />
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp15GermanLoader.LoadSignature(SigStat.Common.Signature,System.IO.MemoryStream,System.Boolean)">
            <summary>
            Loads one signature from specified stream.
            </summary>
            <remarks>
            Based on Mohammad's MCYT reader.
            </remarks>
            <param name="signature">Signature to write features to.</param>
            <param name="stream">Stream to read MCYT data from.</param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="T:SigStat.Common.Loaders.SigComp19OnlineLoader">
            <summary>
            <see cref="T:SigStat.Common.Loaders.DataSetLoader"/> for the SigComp19 dataset
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp19OnlineLoader.SamplingFrequency">
            <summary>
            sampling frequency for this database
            </summary>
        </member>
        <member name="T:SigStat.Common.Loaders.SigComp19OnlineLoader.SigComp19">
            <summary>
            Set of features containing raw data loaded from SigComp19-format database.
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp19OnlineLoader.SigComp19.X">
            <summary>
            X cooridnates from the online signature imported from the SigComp19 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp19OnlineLoader.SigComp19.Y">
            <summary>
            Y cooridnates from the online signature imported from the SigComp19 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp19OnlineLoader.SigComp19.P">
            <summary>
            Pressure from the online signature imported from the SigComp19 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp19OnlineLoader.SigComp19.Altitude">
            <summary>
            Altitude from the online signature imported from the SigComp19 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp19OnlineLoader.SigComp19.Azimuth">
            <summary>
            Azimuth from the online signature imported from the SigComp19 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp19OnlineLoader.SigComp19.Distance">
            <summary>
            Distance from the surface of the tablet from the online signature imported from the SigComp19 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp19OnlineLoader.SigComp19.T">
            <summary>
            T values from the online signature imported from the SigComp19 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.SigComp19OnlineLoader.SigComp19.EventType">
            <summary>
            EventType (pen up) values from the online signature imported from the SigComp19 database
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp19OnlineLoader.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.SigComp19OnlineLoader"/> class.
            </summary>
            <param name="databasePath">The database path.</param>
            <param name="standardFeatures">if set to <c>true</c> features will be also stored in <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp19OnlineLoader.DatabasePath">
            <summary>
            Gets or sets the database path.
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp19OnlineLoader.StandardFeatures">
            <summary>
            Gets or sets a value indicating whether features are also loaded as <see cref="T:SigStat.Common.Features"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.SigComp19OnlineLoader.SignerFilter">
            <summary>
            Ignores any signers during the loading, that do not match the predicate
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp19OnlineLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc />
        </member>
        <member name="M:SigStat.Common.Loaders.SigComp19OnlineLoader.LoadSignature(SigStat.Common.Signature,System.IO.MemoryStream,System.Boolean)">
            <summary>
            Loads one signature from specified stream.
            </summary>
            <remarks>
            Based on Mohammad's MCYT reader.
            </remarks>
            <param name="signature">Signature to write features to.</param>
            <param name="stream">Stream to read SigComp19 data from.</param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="T:SigStat.Common.Loaders.Svc2004">
            <summary>
            Set of features containing raw data loaded from SVC2004-format database.
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.Svc2004.X">
            <summary>
            X cooridnates from the online signature imported from the SVC2004 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.Svc2004.Y">
            <summary>
            Y cooridnates from the online signature imported from the SVC2004 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.Svc2004.T">
            <summary>
            T values from the online signature imported from the SVC2004 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.Svc2004.Button">
            <summary>
            Button values from the online signature imported from the SVC2004 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.Svc2004.Azimuth">
            <summary>
            Azimuth values from the online signature imported from the SVC2004 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.Svc2004.Altitude">
            <summary>
            Altitude values from the online signature imported from the SVC2004 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.Svc2004.Pressure">
            <summary>
            Pressure values from the online signature imported from the SVC2004 database
            </summary>
        </member>
        <member name="F:SigStat.Common.Loaders.Svc2004.All">
            <summary>
            A list of all Svc2004 feature descriptors
            </summary>
        </member>
        <member name="T:SigStat.Common.Loaders.Svc2004Loader">
            <summary>
            Loads SVC2004-format database from .zip
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.Svc2004Loader.SamplingFrequency">
            <summary>
            Sampling Frequency of the SVC database
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.Svc2004Loader.DatabasePath">
            <summary>
            Gets or sets the database path.
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.Svc2004Loader.StandardFeatures">
            <summary>
            Gets or sets a value indicating whether features are also loaded as <see cref="T:SigStat.Common.Features"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.Svc2004Loader.SignerFilter">
            <summary>
            Ignores any signers during the loading, that do not match the predicate
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.Svc2004Loader.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.Svc2004Loader"/> class with specified database.
            </summary>
            <param name="databasePath">Represents the path, to load the signatures from. It supports two basic approaches:
            <list type="bullet">
            <item>DatabasePath may point to a (non password protected) zip file, containing the siganture files</item>
            <item>DatabasePath may point to a directory with all the signer files or with files grouped in subdirectories</item>
            </list></param>
            <param name="standardFeatures">Convert loaded data (<see cref="T:SigStat.Common.Loaders.Svc2004"/>) to standard <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="M:SigStat.Common.Loaders.Svc2004Loader.#ctor(System.String,System.Boolean,System.Predicate{SigStat.Common.Signer})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.Svc2004Loader"/> class with specified database.
            </summary>
            <param name="databasePath">Represents the path, to load the signatures from. It supports two basic approaches:
            <list type="bullet">
            <item>DatabasePath may point to a (non password protected) zip file, containing the siganture files</item>
            <item>DatabasePath may point to a directory with all the signer files or with files grouped in subdirectories</item>
            </list></param>
            <param name="standardFeatures">Convert loaded data (<see cref="T:SigStat.Common.Loaders.Svc2004"/>) to standard <see cref="T:SigStat.Common.Features"/>.</param>
            <param name="signerFilter">Sets the <see cref="P:SigStat.Common.Loaders.Svc2004Loader.SignerFilter"/> property</param>
        </member>
        <member name="M:SigStat.Common.Loaders.Svc2004Loader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Loaders.Svc2004Loader.LoadSignature(SigStat.Common.Signature,System.String,System.Boolean)">
            <summary>
            Loads one signature from specified file path.
            </summary>
            <param name="signature">Signature to write features to.</param>
            <param name="path">Path to a file of format "U*S*.txt"</param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="M:SigStat.Common.Loaders.Svc2004Loader.LoadSignature(SigStat.Common.Signature,System.IO.Stream,System.Boolean)">
            <summary>
            Loads one signature from specified stream.
            </summary>
            <param name="signature">Signature to write features to.</param>
            <param name="stream">Stream to read svc2004 data from.</param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="T:SigStat.Common.Logging.BenchmarkLogModel">
            <summary>
            Represents the results of a benchmark
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkLogModel.BenchmarkResultsGroupName">
            <summary>
            Name of the "BenchmarkResults" group
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkLogModel.ParametersGroupName">
            <summary>
            Name of the "Parameters" group
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkLogModel.ExecutionGroupName">
            <summary>
            Name of the "Excecution" group
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkLogModel.KeyValueGroups">
            <summary>
            Benchmark results stored in Key-Value groups
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkLogModel.BenchmarkResults">
            <summary>
            Benchmark results group
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkLogModel.Parameters">
            <summary>
            Parameters group
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkLogModel.Excecution">
            <summary>
            Excecution group
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkLogModel.SignerResults">
            <summary>
            Results belonging to signers
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.BenchmarkLogModel.#ctor">
            <summary>
            Default constructor creating a blank model.
            </summary>
        </member>
        <member name="T:SigStat.Common.Logging.CompositeLogger">
            <summary>
            Forwards messages to <see cref="T:Microsoft.Extensions.Logging.ILogger"/> components.
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.CompositeLogger.Loggers">
            <summary>
            The list of <see cref="T:Microsoft.Extensions.Logging.ILogger"/> components that messages are forwarded to. Empty by default.
            </summary>
        </member>
        <member name="T:SigStat.Common.Logging.CompositeLogger.ErrorEventHandler">
            <summary>
            The event is raised whenever an error is logged.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="level">The level.</param>
        </member>
        <member name="E:SigStat.Common.Logging.CompositeLogger.Logged">
            <summary>
            Occurs when an error is logged.
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.CompositeLogger.BeginScope``1(``0)">
            <summary>
            Calls <see cref="M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)"/> on each component.
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.CompositeLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Returns true if any of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> components are enabled on the specified <see cref="T:Microsoft.Extensions.Logging.LogLevel"/>.
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.CompositeLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Forwards the message to each <see cref="T:Microsoft.Extensions.Logging.ILogger"/> component.
            </summary>
        </member>
        <member name="T:SigStat.Common.Logging.ExcelReportGenerator">
            <summary>
            This class is used to generate a report in Excel file format, form a Benchmark model.
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.ExcelReportGenerator.GenerateReport(SigStat.Common.Logging.BenchmarkLogModel,System.String)">
            <summary>
            Generates an Excel file that contains the report.
            </summary>
            <param name="model">The model of the report</param>
            <param name="fileName">The name of the generated excel file</param>
        </member>
        <member name="T:SigStat.Common.Logging.KeyValueGroup">
            <summary>
            A group of key-value pairs
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.KeyValueGroup.Name">
            <summary>
            Name of the group
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.KeyValueGroup.Items">
            <summary>
            Key-Value pairs in the group
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.KeyValueGroup.#ctor(System.String)">
            <summary>
            Creates an emty key-value group
            </summary>
            <param name="name">Name if the new group</param>
        </member>
        <member name="T:SigStat.Common.Logging.LogAnalyzer">
            <summary>
            Analizes logs and creates a model from the gained information
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.LogAnalyzer.GetBenchmarkLogModel(System.Collections.Generic.IEnumerable{SigStat.Common.Logging.SigStatLogState})">
            <summary>
            Creates a BenchmarkLogModel from previous logs
            </summary>
            <param name="logs">The collection of logs, that contains the required information for a BenchmarkLogModel</param>
            <returns>The Benchmark model filled with information according to the logs</returns>
        </member>
        <member name="T:SigStat.Common.Logging.ReportInformationLogger">
            <summary>
            Logger for logging report informations.
            </summary>
            <remarks>
            The class is thread safe
            </remarks>
        </member>
        <member name="T:SigStat.Common.Logging.ReportInformationLogger.LogStateLoggedEventHandler">
            <summary>
            The event is raised whenever a SigStatLogState is logged.
            </summary>
        </member>
        <member name="F:SigStat.Common.Logging.ReportInformationLogger.reportLogs">
            <summary>
            Stored logs that contain information for the report.
            </summary>
        </member>
        <member name="E:SigStat.Common.Logging.ReportInformationLogger.Logged">
            <summary>
            Occurs when an error is logged.
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.ReportInformationLogger.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SigStat.Common.Logging.ReportInformationLogger"/>.
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.ReportInformationLogger.BeginScope``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Logging.ReportInformationLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Logging.ReportInformationLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Logging.ReportInformationLogger.GetReportLogs">
            <summary>
            Enumerates the log entries
            </summary>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Logging.SignerResults">
            <summary>
            Informations of a signer
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.SignerResults.SignerID">
            <summary>
            The ID of the signer
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.SignerResults.Far">
            <summary>
            False Acceptance Rate of the signer
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.SignerResults.Frr">
            <summary>
            False Rejection Rate of the signer
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.SignerResults.Aer">
            <summary>
            Average Error Rate of the signer
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.SignerResults.DistanceMatrix">
            <summary>
            Distacne matrix of the signers signatures
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.SignerResults.#ctor(System.String)">
            <summary>
            Creates a signer result with emty result values
            </summary>
            <param name="signerId">The id of the signer</param>
        </member>
        <member name="T:SigStat.Common.Logging.SigStatLogState">
            <summary>
            Base state used in report information logging.
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.SigStatLogState.Source">
            <summary>
            Object from which the state originates.
            </summary>
        </member>
        <member name="T:SigStat.Common.Logging.SignerLogState">
            <summary>
            Specific state used for signer information transiting
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.SignerLogState.SignerID">
            <summary>
            Id of the signer
            </summary>
        </member>
        <member name="T:SigStat.Common.Logging.SignatureLogState">
            <summary>
            Specific state used for signature information transiting
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.SignatureLogState.SignerID">
            <summary>
            Id of the owning signer
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.SignatureLogState.SignatureID">
            <summary>
            Id of the signature
            </summary>
        </member>
        <member name="T:SigStat.Common.Logging.BenchmarkResultsLogState">
            <summary>
            Specific state used for Benchmark result transiting
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkResultsLogState.Aer">
            <summary>
            Average error rate
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkResultsLogState.Far">
            <summary>
            False accaptance rate
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkResultsLogState.Frr">
            <summary>
            False rejection rate
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.BenchmarkResultsLogState.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a BenchmarkResultsLogState
            </summary>
            <param name="aer"> Aer</param>
            <param name="far"> Far</param>
            <param name="frr"> Frr</param>
        </member>
        <member name="M:SigStat.Common.Logging.BenchmarkResultsLogState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Logging.SignerResultsLogState">
            <summary>
            Specific state used for Signer result transiting
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.SignerResultsLogState.Aer">
            <summary>
            Average error rate
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.SignerResultsLogState.Far">
            <summary>
            False accaptance rate
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.SignerResultsLogState.Frr">
            <summary>
            False rejection rate
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.SignerResultsLogState.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Creates a SignerResultsLogState
            </summary>
            /// <param name="signerId"> Id of the signer</param>
            <param name="aer"> Aer</param>
            <param name="far"> Far</param>
            <param name="frr"> Frr</param>
        </member>
        <member name="M:SigStat.Common.Logging.SignerResultsLogState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Logging.BenchmarkKeyValueLogState">
            <summary>
            Specific state used for Benchmarks key-value information transiting
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkKeyValueLogState.Group">
            <summary>
            Group of the key-value pair
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkKeyValueLogState.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.BenchmarkKeyValueLogState.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.BenchmarkKeyValueLogState.#ctor(System.String,System.String,System.Object)">
            <summary>
            Creates a BenchmarkKeyValueLogState
            </summary>
            <param name="group">Group</param>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:SigStat.Common.Logging.BenchmarkKeyValueLogState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Logging.ClassifierDistanceLogState">
            <summary>
            Specific state for signature distance information transiting
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.ClassifierDistanceLogState.Signer1Id">
            <summary>
            Id of the first signature's signer
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.ClassifierDistanceLogState.Signer2Id">
            <summary>
            /// Id of the second signature's signer
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.ClassifierDistanceLogState.Signature1Id">
            <summary>
            Id of the first signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.ClassifierDistanceLogState.Signature2Id">
            <summary>
            Id of the second signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Logging.ClassifierDistanceLogState.Distance">
            <summary>
            Distance values between the signatures
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.ClassifierDistanceLogState.#ctor(System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Creates a ClassifierDistanceLogState
            </summary>
            <param name="signer1Id">Id of the first signature's signer</param>
            <param name="signer2Id">Id of the second signature's signer</param>
            <param name="signature1Id">Id of the first signature</param>
            <param name="signature2Id">Id of the second signature</param>
            <param name="distance">Distance values between the signatures</param>
        </member>
        <member name="M:SigStat.Common.Logging.ClassifierDistanceLogState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Logging.SimpleConsoleLogger">
            <summary>
            Logs messages to <see cref="T:System.Console"/>. 
            The font color is determined by the severity level.
            </summary>
        </member>
        <member name="T:SigStat.Common.Logging.SimpleConsoleLogger.ConsoleMessageLoggedEventHandler">
            <summary>
            The event is raised whenever a console message is logged
            </summary>
            <param name="consoleMessage"></param>
        </member>
        <member name="P:SigStat.Common.Logging.SimpleConsoleLogger.LogLevel">
            <summary>
            All events below this level will be filtered
            </summary>
        </member>
        <member name="E:SigStat.Common.Logging.SimpleConsoleLogger.Logged">
            <summary>
            Occurs when a console message is logged
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.SimpleConsoleLogger.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SigStat.Common.Logging.SimpleConsoleLogger"/> with LogLevel set to <see cref="F:Microsoft.Extensions.Logging.LogLevel.Information"/>.
            </summary>
        </member>
        <member name="M:SigStat.Common.Logging.SimpleConsoleLogger.#ctor(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Initializes a new instance of <see cref="T:SigStat.Common.Logging.SimpleConsoleLogger"/> with a custom <see cref="T:Microsoft.Extensions.Logging.LogLevel"/>.
            </summary>
            <param name="logLevel">Initial value for LogLevel.</param>
        </member>
        <member name="M:SigStat.Common.Logging.SimpleConsoleLogger.BeginScope``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Logging.SimpleConsoleLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Logging.SimpleConsoleLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.FeatureDescriptor">
            <summary>
            Represents a feature with name and type.
            </summary>
        </member>
        <member name="P:SigStat.Common.FeatureDescriptor.Name">
            <summary> Gets or sets a human readable name of the feature. </summary>
        </member>
        <member name="P:SigStat.Common.FeatureDescriptor.Key">
            <summary> Gets the unique key of the feature. </summary>
        </member>
        <member name="P:SigStat.Common.FeatureDescriptor.FeatureType">
            <summary> Gets or sets the type of the feature. </summary>
        </member>
        <member name="F:SigStat.Common.FeatureDescriptor.syncRoot">
            <summary> Gets whether the type of the feature is List. </summary>
        </member>
        <member name="F:SigStat.Common.FeatureDescriptor.descriptors">
            <summary> The static dictionary of all descriptors. </summary>
        </member>
        <member name="M:SigStat.Common.FeatureDescriptor.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.FeatureDescriptor"/> class, and adds it to the static <see cref="F:SigStat.Common.FeatureDescriptor.descriptors"/>.
            Therefore, the <paramref name="key"/> parameter must be unique.
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <param name="featureType"></param>
        </member>
        <member name="M:SigStat.Common.FeatureDescriptor.IsRegistered(System.String)">
            <summary>
            Returns true, if there is a FeatureDescriptor registered with the given key
            </summary>
            <param name="featureKey">The key to search for</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.FeatureDescriptor.Register(System.String,System.Type)">
            <summary>
            Registers a new <see cref="T:SigStat.Common.FeatureDescriptor"/> with a given key.
            If the FeatureDescriptor is allready registered, this function will
            return a reference to the originally registered FeatureDescriptor.
            to the a
            </summary>
            <param name="featureKey">The key for identifying the FeatureDescriptor</param>
            <param name="type">The type of the actual feature values represented by <see cref="T:SigStat.Common.FeatureDescriptor"/></param>
            <returns>A reference to the registered <see cref="T:SigStat.Common.FeatureDescriptor"/> instance</returns>
        </member>
        <member name="M:SigStat.Common.FeatureDescriptor.Get(System.String)">
            <summary>
            Gets the <see cref="T:SigStat.Common.FeatureDescriptor"/> specified by <paramref name="key"/>.
            Throws <see cref="T:System.Collections.Generic.KeyNotFoundException"/> exception if there is no descriptor registered with the given key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.FeatureDescriptor.GetAll">
            <summary>
            Gets a dictionary of all registered feature descriptors
            </summary>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.FeatureDescriptor.Get``1(System.String)">
            <summary>
            Gets the <see cref="T:SigStat.Common.FeatureDescriptor`1"/> specified by <paramref name="key"/>.
            If the key is not registered yet, a new <see cref="T:SigStat.Common.FeatureDescriptor`1"/> is automatically created with the given key and type.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.FeatureDescriptor.ToString">
            <summary>
            Returns a string represenatation of the FeatureDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.FeatureDescriptor`1">
            <summary>
            Represents a feature with the type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type of the feature.</typeparam>
        </member>
        <member name="M:SigStat.Common.FeatureDescriptor`1.Get(System.String)">
            <summary>
            Gets the <see cref="T:SigStat.Common.FeatureDescriptor`1"/> specified by <paramref name="key"/>.
            If the key is not registered yet, a new <see cref="T:SigStat.Common.FeatureDescriptor`1"/> is automatically created with the given key and type.
            </summary>
        </member>
        <member name="T:SigStat.Common.Origin">
            <summary>Represents our knowledge on the origin of a signature. </summary>
        </member>
        <member name="F:SigStat.Common.Origin.Unknown">
            <summary>Use this in practice before a signature is verified. </summary>
        </member>
        <member name="F:SigStat.Common.Origin.Genuine">
            <summary>The <see cref="T:SigStat.Common.Signature"/>'s origin is verified to be from <see cref="P:SigStat.Common.Signature.Signer"/></summary>
        </member>
        <member name="F:SigStat.Common.Origin.Forged">
            <summary>The <see cref="T:SigStat.Common.Signature"/> is a forgery.</summary>
        </member>
        <member name="T:SigStat.Common.Signature">
            <summary>
            Represents a signature as a collection of features, containing the data that flows in the pipeline.
            </summary>
        </member>
        <member name="P:SigStat.Common.Signature.ID">
            <summary>An identifier for the Signature. Keep it unique to be useful for logs. </summary>
        </member>
        <member name="P:SigStat.Common.Signature.Origin">
            <summary>Represents our knowledge on the origin of the signature. <see cref="F:SigStat.Common.Origin.Unknown"/> may be used in practice before it is verified.</summary>
        </member>
        <member name="P:SigStat.Common.Signature.Signer">
            <summary>A reference to the <see cref="T:SigStat.Common.Signer"/> who this signature belongs to. (The origin is not constrained to be genuine.)</summary>
        </member>
        <member name="P:SigStat.Common.Signature.Item(System.String)">
            <summary>
            Gets or sets the specified feature.
            </summary>
            <param name="featureKey"></param>
            <returns>The feature object without cast.</returns>
        </member>
        <member name="P:SigStat.Common.Signature.Item(SigStat.Common.FeatureDescriptor)">
            <summary>
            Gets or sets the specified feature.
            </summary>
            <param name="featureDescriptor"></param>
            <returns>The feature object without cast.</returns>
        </member>
        <member name="M:SigStat.Common.Signature.#ctor">
            <summary>
            Initializes a signature instance
            </summary>
        </member>
        <member name="M:SigStat.Common.Signature.#ctor(System.String,SigStat.Common.Origin,SigStat.Common.Signer)">
            <summary>
            Initializes a signature instance with the given properties
            </summary>
            <param name="signatureID"></param>
            <param name="origin"></param>
            <param name="signer"></param>
        </member>
        <member name="M:SigStat.Common.Signature.GetFeature``1(System.String)">
            <summary>
            Gets the specified feature.
            </summary>
            <param name="featureKey"></param>
            <returns>The casted feature object</returns>
        </member>
        <member name="M:SigStat.Common.Signature.GetFeature``1(SigStat.Common.FeatureDescriptor{``0})">
            <summary>
            Gets the specified feature. This is the preferred way.
            </summary>
            <param name="featureDescriptor"></param>
            <returns>The casted feature object</returns>
        </member>
        <member name="M:SigStat.Common.Signature.GetFeature``1(SigStat.Common.FeatureDescriptor)">
            <summary>
            Gets the specified feature. This is the preferred way.
            </summary>
            <param name="featureDescriptor"></param>
            <returns>The casted feature object</returns>
        </member>
        <member name="M:SigStat.Common.Signature.GetFeatureDescriptors">
            <summary>
            Gets a collection of <see cref="T:SigStat.Common.FeatureDescriptor"/>s that are used in this signature.
            </summary>
            <returns>A collection of <see cref="T:SigStat.Common.FeatureDescriptor"/>s.</returns>
        </member>
        <member name="M:SigStat.Common.Signature.SetFeature``1(SigStat.Common.FeatureDescriptor,``0)">
            <summary>
            Sets the specified feature. 
            </summary>
            <param name="featureDescriptor">The feature to put the new value in.</param>
            <param name="feature">The value to set.</param>
        </member>
        <member name="M:SigStat.Common.Signature.SetFeature``1(System.String,``0)">
            <summary>
            Sets the specified feature. 
            </summary>
            <param name="featureKey">The unique key of the feature.</param>
            <param name="feature">The value to set.</param>
        </member>
        <member name="M:SigStat.Common.Signature.GetAggregateFeature(System.Collections.Generic.List{SigStat.Common.FeatureDescriptor})">
            <summary>
            Aggregate multiple features into one. Example: X, Y features -> P.xy feature.
            Use this for example at DTW algorithm input.
            </summary>
            <param name="fs">List of features to aggregate.</param>
            <returns>Aggregated feature value</returns>
        </member>
        <member name="M:SigStat.Common.Signature.HasFeature(SigStat.Common.FeatureDescriptor)">
            <summary>
            Returns true if the signature contains the specified feature
            </summary>
            <param name="featureDescriptor"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Signature.HasFeature(System.String)">
            <summary>
            Returns true if the signature contains the specified feature
            </summary>
            <param name="featureKey"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Signature.ToString">
            <summary>
            Returns a string representation of the signature
            </summary>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Signature.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the features.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the features.
            </returns>
        </member>
        <member name="T:SigStat.Common.Signer">
            <summary>
            Represents a person as an <see cref="P:SigStat.Common.Signer.ID"/> and a list of <see cref="P:SigStat.Common.Signer.Signatures"/>.
            </summary>
        </member>
        <member name="P:SigStat.Common.Signer.bestSampleRate">
            <summary>
            best sampling frequency for the signer
            </summary>
        </member>
        <member name="P:SigStat.Common.Signer.bestStep">
            <summary>
            best step (nmber of skipped points) for the signer
            </summary>
        </member>
        <member name="P:SigStat.Common.Signer.bestFrr">
            <summary>
            best frr for the signer, used to find the best sampling frequency and step for each signer
            </summary>
        </member>
        <member name="P:SigStat.Common.Signer.ID">
            <summary>
            An identifier for the Signer. Keep it unique to be useful for logs.
            </summary>
        </member>
        <member name="P:SigStat.Common.Signer.Signatures">
            <summary>
            List of signatures that belong to the signer. 
            (Their origin is not constrained to be genuine.)
            </summary>
        </member>
        <member name="M:SigStat.Common.Signer.ToString">
            <summary>
            Returns a string representation of a Signer
            </summary>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.BasicMetadataExtraction">
            <summary>
            Extracts basic statistical signature (like <see cref="F:SigStat.Common.Features.X"/> or <see cref="F:SigStat.Common.Features.Cog"/>) information from an Image
            </summary>
        </member>
        <member name="P:SigStat.Common.BasicMetadataExtraction.Trim">
            <summary>
            Represents theratio of significant pixels that should be trimmed
            from each side while calculating <see cref="F:SigStat.Common.Features.TrimmedBounds"/>
            </summary>
        </member>
        <member name="M:SigStat.Common.BasicMetadataExtraction.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Classifiers.DtwSignerModel">
            <summary>
            Represents a trained model for <see cref="T:SigStat.Common.PipelineItems.Classifiers.DtwClassifier"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.DtwSignerModel.SignerID">
            <inheritdoc/>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.DtwSignerModel.GenuineSignatures">
            <summary>
            A list a of genuine signatures used for training
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.DtwSignerModel.Threshold">
            <summary>
            A threshold, that will be used for classification. Signatures with
            an average DTW distance from the genuines above this threshold will
            be classified as forgeries
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.DtwSignerModel.DistanceMatrix">
            <summary>
            DTW distance matrix of the genuine signatures
            </summary>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Classifiers.DtwClassifier">
            <summary>
            Classifies Signatures with the DTW algorithm.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.DtwClassifier.DistanceFunction">
            <summary>
            The function used to calculate the distance between two data points during DTW calculation
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.DtwClassifier.Features">
            <summary>
            Gets or sets the features to consider during distance calculation
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.DtwClassifier.MultiplicationFactor">
            <summary>
            Gets or sets the multiplication factor to be used during threshold calculation
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.DtwClassifier.#ctor">
            <summary>Initializes a new instance of the <see cref="T:SigStat.Common.PipelineItems.Classifiers.DtwClassifier"/> class with the default Manhattan distance method.</summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.DtwClassifier.#ctor(System.Func{System.Double[],System.Double[],System.Double})">
            <summary>Initializes a new instance of the <see cref="T:SigStat.Common.PipelineItems.Classifiers.DtwClassifier"/> class with a specified distance method.</summary>
             <param name="distanceMethod">Accord.Math.Distance.*</param>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.DtwClassifier.Train(System.Collections.Generic.List{SigStat.Common.Signature})">
            <inheridoc/>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.DtwClassifier.Test(SigStat.Common.Pipeline.ISignerModel,SigStat.Common.Signature)">
            <inheridoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier">
            <summary>
            This <see cref="T:SigStat.Common.Pipeline.IDistanceClassifier"/> implementation will consider both test and 
            training samples and claculate the threshold to separate the original and forged
            signatures to approximate EER. Note that this classifier is not applicable for 
            real world scenarios. It was developed to test the theoratical boundaries of 
            threshold based classification
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.Pipeline.IDistanceClassifier" />
        </member>
        <member name="T:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.SignerModel">
            <summary>
            Represents a trained model for <see cref="T:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.SignerModel.SignerID">
            <inheritdoc/>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.SignerModel.SignatureDistanceFromTraining">
            <summary>
            Gets or sets the signature distance from training.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.SignerModel.Threshold">
            <summary>
            A threshold, that will be used for classification. Signatures with
            an average DTW distance from the genuines above this threshold will
            be classified as forgeries
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.SignerModel.ErrorRates">
            <summary>
            Gets or sets the error rates corresponding to specific thresholds
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.SignerModel.DistanceMatrix">
            <summary>
            DTW distance matrix of the signatures
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.Features">
            <summary>
            <see cref="T:SigStat.Common.FeatureDescriptor"/>s to consider during classification
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.Sampler">
            <summary>
            <see cref="P:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.Sampler"/> used for selecting training and test sets during a benchmark
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.DistanceFunction">
            <summary>
            The function used to calculate the distance between two data sequences
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.NearestNeighborCount">
            <summary>
            The number of nearest neighbors to consider during evaluation. Set it to null to use all training signatures.
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.#ctor(System.Nullable{System.Int32},SigStat.Common.Algorithms.Distances.IDistance{System.Double[][]})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier"/> class.
            </summary>
            <param name="nearestNeighborCount">The number of nearest neighbours to consider during classification</param>
            <param name="distanceFunction">The distance function.</param>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.Train(System.Collections.Generic.List{SigStat.Common.Signature})">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.Train(System.Collections.Generic.List{SigStat.Common.Signature},SigStat.Common.DistanceMatrix{System.String,System.String,System.Double})">
            <summary>
            Trains the specified signatures based on a precalculated distance matrix
            </summary>
            <param name="signatures">The signatures.</param>
            <param name="distanceMatrix">The distance matrix may contain all the distance pairs for the signatures. If you ommit this parameter, 
            distances will be calculated automatically using <see cref="P:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.DistanceFunction"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.NearestNeighborEerClassifier.Test(SigStat.Common.Pipeline.ISignerModel,SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier">
            <summary>
            This <see cref="T:SigStat.Common.Pipeline.IDistanceClassifier"/> implementation will consider both test and 
            training samples and claculate the threshold to separate the original and forged
            signatures to approximate EER. Note that this classifier is not applicable for 
            real world scenarios. It was developed to test the theoratical boundaries of 
            threshold based classification
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.Pipeline.IDistanceClassifier" />
        </member>
        <member name="T:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.SignerModel">
            <summary>
            Represents a trained model for <see cref="T:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.SignerModel.SignerID">
            <inheritdoc/>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.SignerModel.DistanceCache">
            <summary>
            Precalculated distances of known signatures
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.SignerModel.TrainingSignatures">
            <summary>
            A list a of genuine signatures used for training
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.Features">
            <summary>
            <see cref="T:SigStat.Common.FeatureDescriptor"/>s to consider during classification
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.DistanceFunction">
            <summary>
            The function used to calculate the distance between two data sequences
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.J">
            <summary>
            The J parameter of the <see cref="T:SigStat.Common.Algorithms.Classifiers.Ocjknn"/> classifier
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.K">
            <summary>
            The K parameter of the <see cref="T:SigStat.Common.Algorithms.Classifiers.Ocjknn"/> classifier
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.Threshold">
            <summary>
            The Threshold parameter of the <see cref="T:SigStat.Common.Algorithms.Classifiers.Ocjknn"/> classifier
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.#ctor(System.Int32,System.Int32,System.Double,SigStat.Common.Algorithms.Distances.IDistance{System.Double[][]})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier"/> class.
            </summary>
            <param name="j">The J parameter of the <see cref="T:SigStat.Common.Algorithms.Classifiers.Ocjknn"/> classifier</param>
            <param name="k">The K parameter of the <see cref="T:SigStat.Common.Algorithms.Classifiers.Ocjknn"/> classifier</param>
            <param name="threshold">The K parameter of the <see cref="T:SigStat.Common.Algorithms.Classifiers.Ocjknn"/> classifier</param>
            <param name="distanceFunction">The distance function.</param>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.Train(System.Collections.Generic.List{SigStat.Common.Signature})">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.Train(System.Collections.Generic.List{SigStat.Common.Signature},SigStat.Common.DistanceMatrix{System.String,System.String,System.Double})">
            <summary>
            Trains the specified signatures based on a precalculated distance matrix
            </summary>
            <param name="signatures">The signatures.</param>
            <param name="distanceMatrix">The distance matrix may contain all the distance pairs for the signatures. If you ommit this parameter, 
            distances will be calculated automatically using <see cref="P:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.DistanceFunction"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.OneClassNearestNeighborClassifier.Test(SigStat.Common.Pipeline.ISignerModel,SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier">
            <summary>
            This <see cref="T:SigStat.Common.Pipeline.IDistanceClassifier"/> implementation will consider both test and 
            training samples and claculate the threshold to separate the original and forged
            signatures to approximate EER. Note that this classifier is not applicable for 
            real world scenarios. It was developed to test the theoratical boundaries of 
            threshold based classification
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.Pipeline.IDistanceClassifier" />
        </member>
        <member name="T:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.OptimalDtwSignerModel">
            <summary>
            Represents a trained model for <see cref="T:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.OptimalDtwSignerModel.SignerID">
            <inheritdoc/>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.OptimalDtwSignerModel.SignatureDistanceFromTraining">
            <summary>
            Gets or sets the signature distance from training.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.OptimalDtwSignerModel.Threshold">
            <summary>
            A threshold, that will be used for classification. Signatures with
            an average DTW distance from the genuines above this threshold will
            be classified as forgeries
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.OptimalDtwSignerModel.ErrorRates">
            <summary>
            Gets or sets the error rates corresponding to specific thresholds
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.OptimalDtwSignerModel.DistanceMatrix">
            <summary>
            DTW distance matrix of the signatures
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.Features">
            <summary>
            <see cref="T:SigStat.Common.FeatureDescriptor"/>s to consider during classification
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.Sampler">
            <summary>
            <see cref="P:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.Sampler"/> used for selecting training and test sets during a benchmark
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.DistanceFunction">
            <summary>
            The function used to calculate the distance between two data points during DTW calculation
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.WarpingWindowLength">
            <summary>
            Length of the warping window to be used with DTW
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.#ctor(System.Func{System.Double[],System.Double[],System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier"/> class.
            </summary>
            <param name="distanceFunction">The distance function.</param>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.Train(System.Collections.Generic.List{SigStat.Common.Signature})">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.OptimalDtwClassifier.Test(SigStat.Common.Pipeline.ISignerModel,SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Classifiers.WeightedClassifier">
            <summary>
            Classifies Signatures by weighing other Classifier results.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.WeightedClassifier.Items">
            <summary>List of classifiers and belonging weights.</summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.WeightedClassifier.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.WeightedClassifier.Add(System.ValueTuple{SigStat.Common.Pipeline.IClassifier,System.Double})">
            <summary>Add a new classifier with given weight to the list of items.</summary>
            <param name="newItem">Classifier with belonging weight.</param>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.WeightedClassifier.Train(System.Collections.Generic.List{SigStat.Common.Signature})">
            <inheridoc/>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.WeightedClassifier.Test(SigStat.Common.Pipeline.ISignerModel,SigStat.Common.Signature)">
            <inheridoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.CubicInterpolation">
            <summary>
            Cubic interpolation algorithm
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.CubicInterpolation.FeatureValues">
            <summary>
            FeatureValues
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.CubicInterpolation.TimeValues">
            <summary>
            TimeValues
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.CubicInterpolation.GetValue(System.Double)">
            <summary>Gets the value.</summary>
            <param name="timestamp">The timestamp.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">List of timestamps is null
            or
            List of feature values is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The given timestamp is not in the range of TimeValues</exception>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations">
            <summary>
            This transformation fills gaps of online signature by interpolating the last known
            feature values. Gaps should be represented in the signature with two zero pressure border points.
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.ITransformation" />
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.TimeSlot">
            <summary>
            Helper class for <see cref="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.TimeSlot.StartTime">
            <summary>
            Gets or sets the start time of the slot
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.TimeSlot.EndTime">
            <summary>
            Gets or sets the end time of the slot
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.TimeSlot.Length">
            <summary>
            Gets the length of the slot
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.TimeSlot.PenDown">
            <summary>
            This indicates whether the pen touches the paper during the time slot
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.TimeInputFeature">
            <summary>
            Gets or sets the feature representing the timestamps of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.PressureInputFeature">
            <summary>
            Gets or sets the feature representing pressure in an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.PointTypeInputFeature">
            <summary>
            Gets or sets the feature representing the type of the points in an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.InputFeatures">
            <summary>
            Gets or sets the features of an online signature that need to be altered
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.TimeOutputFeature">
            <summary>
            Gets or sets the feature representing the modified timestamps of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.PressureOutputFeature">
            <summary>
            Gets or sets the feature representing the modified pressure values of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.PointTypeOutputFeature">
            <summary>
            Gets or sets the feature representing the modified point type values in an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.OutputFeatures">
            <summary>
            Gets or sets the features of an online signature that were altered
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.InterpolationType">
            <summary>
            An implementation of <see cref="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.IInterpolation"/>
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.FillPenUpDurations.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.FilterPoints">
            <summary>
            Removes samples based on a criteria from online signature time series
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.ITransformation" />
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FilterPoints.KeyFeatureInput">
            <summary>
            <see cref="T:SigStat.Common.FeatureDescriptor"/> that controls the removal of samples (e.g. <see cref="F:SigStat.Common.Features.Pressure"/>)
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FilterPoints.InputFeatures">
            <summary>
            <see cref="T:SigStat.Common.FeatureDescriptor"/> list of all features to resample
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FilterPoints.KeyFeatureOutput">
            <summary>
            Resampled output for <see cref="T:SigStat.Common.FeatureDescriptor"/> that controls the removal of samples (e.g. <see cref="F:SigStat.Common.Features.Pressure"/>)
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FilterPoints.OutputFeatures">
            <summary>
            Resampled output for all input features
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FilterPoints.Percentile">
            <summary>
            The lowes percentile of the <see cref="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.FilterPoints.KeyFeatureInput"/> will be removed during filtering
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.FilterPoints.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.IInterpolation">
            <summary>
            Represents an interploation algorithm
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.IInterpolation.FeatureValues">
            <summary>
            Gets or sets the feature values.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.IInterpolation.TimeValues">
            <summary>
            Timestamps
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.IInterpolation.GetValue(System.Double)">
            <summary>
            Gets the interpolated value at a given timestamp
            </summary>
            <param name="timestamp">The timestamp.</param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.LinearInterpolation">
            <summary>
            Performs linear interpolation on the input
            </summary>
            <seealso cref="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.IInterpolation" />
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.LinearInterpolation.FeatureValues">
            <inheritdoc/>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.LinearInterpolation.TimeValues">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.LinearInterpolation.GetValue(System.Double)">
            <summary>
            Gets the interpolated value at a given timestamp
            </summary>
            <param name="timestamp">The timestamp.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">TimeValues is not initialized</exception>
            <exception cref="T:System.NullReferenceException">FeatureValues is not initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The given timestamp is not in the range of TimeValues</exception>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation">
            <summary>
            Performs rotation normalization on the online signature
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.ITransformation" />
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation.InputX">
            <summary>
            Gets or sets the input feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation.InputY">
            <summary>
            Gets or sets the input feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation.InputT">
            <summary>
            Gets or sets the input feature representing the timestamps of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation.OutputX">
            <summary>
            Gets or sets the output feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation.OutputY">
            <summary>
            Gets or sets the input feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation2">
            <summary>
            Performs rotation normalization on the online signature
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.ITransformation" />
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation2.InputX">
            <summary>
            Gets or sets the input feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation2.InputY">
            <summary>
            Gets or sets the input feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation2.OutputX">
            <summary>
            Gets or sets the output feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation2.OutputY">
            <summary>
            Gets or sets the output feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation2.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation3">
            <summary>
            Performs rotation normalization on the online signature
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.ITransformation" />
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation3.InputX">
            <summary>
            Gets or sets the input feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation3.InputY">
            <summary>
            Gets or sets the input feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation3.OutputX">
            <summary>
            Gets or sets the output feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation3.OutputY">
            <summary>
            Gets or sets the output feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotation3.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotationForX">
            <summary>
            Performs rotation normalization on the online signature
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.ITransformation" />
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotationForX.InputX">
            <summary>
            Gets or sets the input feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotationForX.InputY">
            <summary>
            Gets or sets the input feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotationForX.InputT">
            <summary>
            Gets or sets the input feature representing the timestamps of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotationForX.OutputX">
            <summary>
            Gets or sets the output feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotationForX.OutputY">
            <summary>
            Gets or sets the input feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.NormalizeRotationForX.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.OrthognalRotation">
            <summary>
            Performs rotation normalization on the online signature
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.ITransformation" />
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.OrthognalRotation.InputX">
            <summary>
            Gets or sets the input feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.OrthognalRotation.InputY">
            <summary>
            Gets or sets the input feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.OrthognalRotation.InputT">
            <summary>
            Gets or sets the input feature representing the timestamps of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.OrthognalRotation.OutputX">
            <summary>
            Gets or sets the output feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.OrthognalRotation.OutputY">
            <summary>
            Gets or sets the input feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.OrthognalRotation.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.RelativeScale">
            <summary>
            Maps values of a feature to a specific range.
            <para>InputFeature: feature to be scaled.</para>
            <para>OutputFeature: output feature for scaled InputFeature</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.RelativeScale.InputFeature">
            <summary>
            Gets or sets the input feature.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.RelativeScale.ReferenceFeature">
            <summary>
            Gets or sets the reference feature.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.RelativeScale.OutputFeature">
            <summary>
            Gets or sets the output feature.
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.RelativeScale.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.ResampleSamplesCountBased">
            <summary>
            Resamples an online signature to a specific sample count using the specified <see cref="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.IInterpolation"/> algorithm
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.ITransformation" />
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.ResampleSamplesCountBased.NumOfSamples">
            <summary>
            Gets or sets the number of samples.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.ResampleSamplesCountBased.InterpolationType">
            <summary>
            Gets or sets the type of the interpolation. <seealso cref="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.IInterpolation"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.ResampleSamplesCountBased.InputFeatures">
            <summary>
            Gets or sets the input features.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.ResampleSamplesCountBased.OriginalTFeature">
            <summary>
            Gets or sets the input timestamp feature.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.ResampleSamplesCountBased.ResampledTFeature">
            <summary>
            Gets or sets the resampled timestamp feature.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.ResampleSamplesCountBased.OutputFeatures">
            <summary>
            Gets or sets the resampled  features.
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.ResampleSamplesCountBased.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.SampleRate">
            <summary>
            Performs rotation normalization on the online signature
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.ITransformation" />
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.SampleRate.samplerate">
            <summary>
            Gets or sets the input feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.SampleRate.InputX">
            <summary>
            Gets or sets the input feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.SampleRate.InputY">
            <summary>
            Gets or sets the input feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.SampleRate.InputP">
            <summary>
            Gets or sets the input feature representing the timestamps of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.SampleRate.OutputX">
            <summary>
            Gets or sets the output feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.SampleRate.OutputY">
            <summary>
            Gets or sets the input feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.SampleRate.OutputP">
            <summary>
            Gets or sets the input feature representing the Pressure values of an online signature
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.SampleRate.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.ScalingMode">
            <summary>
            Mode specification for <see cref="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.Scale"/>
            </summary>
        </member>
        <member name="F:SigStat.Common.PipelineItems.Transforms.Preprocessing.ScalingMode.Scaling1">
            <summary>
            Values are scaled into an interval, where the difference between the lower and upper bounds is 1
            </summary>
        </member>
        <member name="F:SigStat.Common.PipelineItems.Transforms.Preprocessing.ScalingMode.ScalingS">
            <summary>
            Values are scaled based on their standard deviation
            </summary>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.Scale">
            <summary>
            Maps values of a feature to a specific range.
            <para>InputFeature: feature to be scaled.</para>
            <para>OutputFeature: output feature for scaled InputFeature</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.Scale.InputFeature">
            <summary>
            Gets or sets the input feature.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.Scale.Mode">
            <summary>
            Type of the scaling which defines the scaling behavior
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.Scale.OutputFeature">
            <summary>
            Gets or sets the output feature.
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.Scale.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.OriginType">
            <summary>
            Origin specification for <see cref="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.TranslatePreproc"/>
            </summary>
        </member>
        <member name="F:SigStat.Common.PipelineItems.Transforms.Preprocessing.OriginType.CenterOfGravity">
            <summary>Center of gravity</summary>
        </member>
        <member name="F:SigStat.Common.PipelineItems.Transforms.Preprocessing.OriginType.Minimum">
            <summary>Minimum</summary>
        </member>
        <member name="F:SigStat.Common.PipelineItems.Transforms.Preprocessing.OriginType.Maximum">
            <summary>Maximum</summary>
        </member>
        <member name="F:SigStat.Common.PipelineItems.Transforms.Preprocessing.OriginType.Predefined">
            <summary>Predefined</summary>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.TranslatePreproc">
            <summary>
            This transformations can be used to translate the coordinates of an online signature
            </summary>
            <seealso cref="T:SigStat.Common.PipelineBase" />
            <seealso cref="T:SigStat.Common.ITransformation" />
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.TranslatePreproc.InputFeature">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> (e.g. <see cref="F:SigStat.Common.Features.X"/>)
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.TranslatePreproc.OutputFeature">
            <summary>
            Output <see cref="T:SigStat.Common.FeatureDescriptor"/> (e.g. <see cref="F:SigStat.Common.Features.X"/>)
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.TranslatePreproc.GoalOrigin">
            <summary>
            Goal origin of the translation
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.TranslatePreproc.NewOrigin">
            <summary>
            New origin after the translation
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.TranslatePreproc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.TranslatePreproc"/> class.
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.TranslatePreproc.#ctor(SigStat.Common.PipelineItems.Transforms.Preprocessing.OriginType)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.TranslatePreproc"/> class.
            </summary>
            <param name="goalOrigin">The goal origin.</param>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.TranslatePreproc.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.UniformScale">
            <summary>
            Maps values of a feature to a specific range and another proportional.
            <para>BaseDimension: feature modelled the base dimension of the scaling. </para>
            <para>ProportionalDimension: feature modelled the dimension scaled proportionally to the base dimension. </para>
            <para>BaseDimensionOutput: output feature for scaled BaseDimension</para>
            <para>ProportionalDimensionOutput: output feature for scaled ProportionalDimension</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.UniformScale.BaseDimension">
            <summary>
            Gets or sets the base dimension.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.UniformScale.ProportionalDimension">
            <summary>
            Gets or sets the ProportionalDimension.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.UniformScale.NewMinBaseValue">
            <summary>
            Lower bound of the interval, in which the base dimension will be scaled
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.UniformScale.NewMaxBaseValue">
            <summary>
            Upper bound of the interval, in which the base dimension will be scaled
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.UniformScale.NewMinProportionalValue">
            <summary>
            Lower bound of the interval, in which the proportional dimension will be scaled
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.UniformScale.BaseDimensionOutput">
            <summary>
            Gets or sets the output base dimension output.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.UniformScale.ProportionalDimensionOutput">
            <summary>
            Gets or sets the output proportional dimension output.
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.UniformScale.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Transforms.Preprocessing.ZNormalization">
            <summary>
            Maps values of a feature to a specific range.
            <para>InputFeature: feature to be scaled.</para>
            <para>OutputFeature: output feature for scaled InputFeature</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.ZNormalization.InputFeature">
            <summary>
            Gets or sets the input feature.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Transforms.Preprocessing.ZNormalization.OutputFeature">
            <summary>
            Gets or sets the output feature.
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Transforms.Preprocessing.ZNormalization.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.SimpleRenderingTransformation">
            <summary>
            Renders an image of the signature based on the available online information (X,Y,Dpi)
            </summary>
        </member>
        <member name="M:SigStat.Common.SimpleRenderingTransformation.Transform(SigStat.Common.Signature)">
            <inheritdoc></inheritdoc>
        </member>
        <member name="T:SigStat.Common.Transforms.ComponentSorter">
            <summary>
            Sorts Component order by comparing each starting X value, and finding nearest components.
            <para>Default Pipeline Input: (bool[,]) Components</para>
            <para>Default Pipeline Output: (bool[,]) Components</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ComponentSorter.Input">
            <summary>
            Gets or sets the input.
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ComponentSorter.Output">
            <summary>
            Gets or sets the output.
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentSorter.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentSorter.Distance(System.Collections.Generic.List{System.Drawing.PointF},System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            Calculates distance between two components by comparing last and first points.
            Components that are left behind are in advantage.
            </summary>
        </member>
        <member name="T:SigStat.Common.Transforms.CentroidTranslate">
            <summary>
            Sequential pipeline to translate X and Y <see cref="T:SigStat.Common.Features"/> to Centroid.
            The following Transforms are called: <see cref="T:SigStat.Common.Transforms.CentroidExtraction"/>, <see cref="T:SigStat.Common.Transforms.Multiply"/>(-1), <see cref="T:SigStat.Common.Transforms.Translate"/>
            <para>Default Pipeline Input: <see cref="F:SigStat.Common.Features.X"/>, <see cref="F:SigStat.Common.Features.Y"/></para>
            <para>Default Pipeline Output: (List{double}) Centroid</para>
            </summary>
            <remarks>This is a special case of <see cref="T:SigStat.Common.Transforms.Translate"/></remarks>
        </member>
        <member name="P:SigStat.Common.Transforms.CentroidTranslate.InputX">
            <summary>
            Gets or sets the input feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.CentroidTranslate.InputY">
            <summary>
            Gets or sets the input feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.CentroidTranslate.OutputX">
            <summary>
            Gets or sets the output feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.CentroidTranslate.OutputY">
            <summary>
            Gets or sets the output feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.CentroidTranslate.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.CentroidTranslate"/> class.</summary>
        </member>
        <member name="T:SigStat.Common.Transforms.TimeReset">
            <summary>
            Sequential pipeline to reset time values to begin at 0.
            The following Transforms are called: Extrema, Multiply, AddVector.
            <para>Default Pipeline Input: <see cref="F:SigStat.Common.Features.T"/></para>
            <para>Default Pipeline Output: <see cref="F:SigStat.Common.Features.T"/></para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.TimeReset.#ctor">
            <summary>Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.TimeReset"/> class.</summary>
        </member>
        <member name="T:SigStat.Common.Transforms.Translate">
            <summary>
            Sequential pipeline to translate X and Y <see cref="T:SigStat.Common.Features"/> by specified vector (constant or feature).
            The following Transforms are called: <see cref="T:SigStat.Common.Transforms.AddConst"/> twice, or <see cref="T:SigStat.Common.Transforms.AddVector"/>.
            <para>Default Pipeline Input: <see cref="F:SigStat.Common.Features.X"/>, <see cref="F:SigStat.Common.Features.Y"/></para>
            <para>Default Pipeline Output: <see cref="F:SigStat.Common.Features.X"/>, <see cref="F:SigStat.Common.Features.Y"/></para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Translate.InputX">
            <summary>
            The feature representing the horizontal coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Translate.InputY">
            <summary>
            The feature representing the vertical coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Translate.OutputX">
            <summary>
            Target feature for storing the transformed horizontal coordinates
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Translate.OutputY">
            <summary>
            Target feature for storing the transformed vertical coordinates
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Translate.#ctor(System.Double,System.Double)">
            <param name="xAdd">Value to translate <see cref="F:SigStat.Common.Features.X"/> by.</param>
            <param name="yAdd">Value to translate <see cref="F:SigStat.Common.Features.Y"/> by.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.Translate.#ctor(SigStat.Common.FeatureDescriptor{System.Collections.Generic.List{System.Double}})">
            <param name="vectorFeature">Feature to translate X and Y by.</param>
        </member>
        <member name="T:SigStat.Common.Transforms.ApproximateOnlineFeatures">
            <summary>
            init Pressure, Altitude, Azimuth features with default values.
            <para>Default Pipeline Output: Features.Pressure, Features.Altitude, Features.Azimuth</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ApproximateOnlineFeatures.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.CentroidExtraction">
            <summary>
            Extracts the Centroid (aka. Center Of Gravity) of the input features.
            <para> Default Pipeline Output: (List{double}) Centroid. </para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.CentroidExtraction.Inputs">
            <summary>
            List of features to process
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.CentroidExtraction.OutputCentroid">
            <summary>
            List of centroid values
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.CentroidExtraction.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.ComponentExtraction">
            <summary>
            Extracts unsorted components by tracing through the binary Skeleton raster.
            <para>Default Pipeline Input: (bool[,]) Skeleton, (List{Point}) EndPoints, (List{Point}) CrossingPoints</para>
            <para>Default Pipeline Output: (List{List{PointF}}) Components</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ComponentExtraction.Skeleton">
            <summary>
            binary representation of a signature image
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ComponentExtraction.EndPoints">
            <summary>
            endpoints
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ComponentExtraction.CrossingPoints">
            <summary>
            crossing points
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ComponentExtraction.OutputComponents">
            <summary>
            Output components
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentExtraction.#ctor(System.Int32)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.ComponentExtraction"/> class with specified sampling resolution.</summary>
            <param name="samplingResolution">Steps to trace before a new point is sampled. Smaller values result in a more precise tracing. Provide a positive value.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentExtraction.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentExtraction.SplitCrossings(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            Unite crossingpoints into crossings (list of its endpoints), and
            split all crossings into neighbouring endpoints.
            </summary>
            <param name="crs">List of crossingpoints</param>
            <returns>List of crossings (1 crossing: List of endpoints)</returns>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentExtraction.Trace(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            lekoveti a szakaszokat. Ebbe mar ne legyenek crossingpointok
            </summary>
            <param name="endPoints"></param>
            <returns>List of sections</returns>
        </member>
        <member name="T:SigStat.Common.Transforms.ComponentsToFeatures">
            <summary>
            Extracts standard <see cref="T:SigStat.Common.Features"/> from sorted Components.
            <para>Default Pipeline Input: (List{List{PointF}}) Components</para>
            <para>Default Pipeline Output: X, Y, Button <see cref="T:SigStat.Common.Features"/></para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ComponentsToFeatures.InputComponents">
            <summary>
            Components
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ComponentsToFeatures.X">
            <summary>
            X
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ComponentsToFeatures.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ComponentsToFeatures.Button">
            <summary>
            Button
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentsToFeatures.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.EndpointExtraction">
            <summary>
            Extracts EndPoints and CrossingPoints from Skeleton.
            <para>Default Pipeline Input: (bool[,]) Skeleton</para>
            <para>Default Pipeline Output: (List{Point}) EndPoints, (List{Point}) CrossingPoints </para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.EndpointExtraction.Skeleton">
            <summary>
            Binary representation of an image
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.EndpointExtraction.OutputEndpoints">
            <summary>
            OutputEndpoints
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.EndpointExtraction.OutputCrossingPoints">
            <summary>
            OutputCrossingPoints
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.EndpointExtraction.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.TangentExtraction">
            <summary>
            Extracts tangent values of the standard X, Y <see cref="T:SigStat.Common.Features"/>
            <para>Default Pipeline Input: X, Y <see cref="T:SigStat.Common.Features"/></para>
            <para>Default Pipeline Output: (List{double})  Tangent </para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.TangentExtraction.X">
            <summary>
            Gets or sets the input feature representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.TangentExtraction.Y">
            <summary>
            Gets or sets the input feature representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.TangentExtraction.OutputTangent">
            <summary>
            Gets or sets the output feature representing the tangent angles of an online signature
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.TangentExtraction.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.AddConst">
            <summary>
            Adds a constant value to a feature. Works with collection features too.
            <para>Default Pipeline Output: Pipeline Input</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.AddConst.Input">
            <summary>
            Input values for trasformation
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.AddConst.Output">
            <summary>
            Output feature to store results
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.AddConst.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.AddConst"/> class with specified settings.
            </summary>
            <param name="value">The value to be added to the input feature.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.AddConst.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.AddVector">
            <summary>
            Adds a vector feature's elements to other features.
            <para>Default Pipeline Output: Pipeline Input</para>
            </summary>
            <example>
            Inputs are: Centroid.xy, X, Y .
            Adds Centroid.x to each element of X.
            Adds Centroid.y to each element of Y.
            </example>
        </member>
        <member name="P:SigStat.Common.Transforms.AddVector.Inputs">
            <summary>
            Inputs
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.AddVector.Outputs">
            <summary>
            Outputs
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.AddVector.#ctor(SigStat.Common.FeatureDescriptor{System.Collections.Generic.List{System.Double}})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.AddVector"/> class with a vector feature.
            Don't forget to add as many Inputs as the vector's dimension.
            </summary>
            <param name="vectorFeature">A collection-type feature where each element represents a dimension of the vector.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.AddVector.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.Extrema">
            <summary>
            Extracts minimum and maximum values of given feature.
            <para>Default Pipeline Output: (List{double}) Min, (List{double}) Max </para>
            </summary>
            <remarks>
            Output features are lists, containing only one value each.
            </remarks>
        </member>
        <member name="M:SigStat.Common.Transforms.Extrema.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.Map">
            <summary>
            Maps values of a feature to a specified range.
            <para>Pipeline Input type: List{double}</para>
            <para>Default Pipeline Output: (List{double}) MapResult</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Map.Input">
            <summary>
            Input
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Map.Output">
            <summary>
            Output
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Map.#ctor(System.Double,System.Double)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.Map"/> class with specified settings. </summary>
            <param name="minVal">New minimum value.</param>
            <param name="maxVal">New maximum value.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.Map.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.Multiply">
            <summary>
            Multiplies the values of a feature with a given constant.
            <para>Pipeline Input type: List{double}</para>
            <para>Default Pipeline Output: (List{double}) Input</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Multiply.InputList">
            <summary>
            Input
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Multiply.Output">
            <summary>
            Output
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Multiply.#ctor(System.Double)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.Multiply"/> class with specified settings. </summary>
            <param name="byConst">The value to multiply the input feature by.</param>
        </member>
        <member name="T:SigStat.Common.Transforms.Normalize">
            <summary>
            Maps values of a feature to 0.0 - 1.0 range.
            <para>Pipeline Input type: List{double}</para>
            <para>Default Pipeline Output: (List{double}) NormalizationResult</para>
            </summary>
            <remarks> This is a specific case of the <see cref="T:SigStat.Common.Transforms.Map"/> transform. </remarks>
        </member>
        <member name="P:SigStat.Common.Transforms.Normalize.Input">
            <summary>
            Input
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Normalize.Output">
            <summary>
            Output
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Normalize.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.Binarization">
            <summary>
            Generates a binary raster version of the input image with the iterative threshold method.
            <para>Pipeline Input type: Image{Rgba32}</para>
            <para>Default Pipeline Output: (bool[,]) Binarized</para>
            </summary>
        </member>
        <member name="T:SigStat.Common.Transforms.Binarization.ForegroundType">
            <summary> Represents the type of the input image. </summary>
        </member>
        <member name="F:SigStat.Common.Transforms.Binarization.ForegroundType.Dark">
            <summary> (default) Foreground is darker than background. (eg. ink on paper) </summary>
        </member>
        <member name="F:SigStat.Common.Transforms.Binarization.ForegroundType.Bright">
            <summary> Foreground is brighter than background. (for non-signature images) </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Binarization.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.Binarization"/> class with default settings: Iterative threshold and <see cref="F:SigStat.Common.Transforms.Binarization.ForegroundType.Dark"/>. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Binarization.#ctor(SigStat.Common.Transforms.Binarization.ForegroundType,System.Nullable{System.Double})">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.Binarization"/> class with specified settings. </summary>
            <param name="foregroundType"></param>
            <param name="binThreshold">Use this threshold value instead of iteratively calculating it. Range from 0 to 1</param>
        </member>
        <member name="P:SigStat.Common.Transforms.Binarization.InputImage">
            <summary>
            Gets or sets the featuredescriptor of the input image.
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Binarization.OutputMask">
            <summary>
            Gets or sets the featuredescriptor of a the binarized image.
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Binarization.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Transforms.Binarization.IterativeThreshold(SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgba32},System.Double)">
            <summary>
            http://accord-framework.net/docs/html/T_Accord_Imaging_Filters_IterativeThreshold.htm
            </summary>
            <param name="image"></param>
            <param name="maxError">pl 0.008</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Transforms.Binarization.Level(SixLabors.ImageSharp.PixelFormats.Rgba32)">
            <summary>
            Extracts the brightness of the input color. Ranges from 0.0 to 1.0
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Transforms.BinaryRasterizer">
            <summary>
            Converts standard features to a binary raster.
            <para>Default Pipeline Input: Standard <see cref="T:SigStat.Common.Features"/></para>
            <para>Default Pipeline Output: (bool[,]) Binarized</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.BinaryRasterizer.InputX">
            <summary>
            Gets or sets the <see cref="T:SigStat.Common.FeatureDescriptor"/> representing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.BinaryRasterizer.InputY">
            <summary>
            Gets or sets the <see cref="T:SigStat.Common.FeatureDescriptor"/> representing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.BinaryRasterizer.InputButton">
            <summary>
            Gets or sets the <see cref="T:SigStat.Common.FeatureDescriptor"/> representing the stroke endings of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.BinaryRasterizer.Output">
            <summary>
            Gets or sets the <see cref="T:SigStat.Common.FeatureDescriptor"/> representing the output of the transformation
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.BinaryRasterizer.#ctor(System.Int32,System.Int32,System.Single)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.BinaryRasterizer"/> class with specified raster size and pen width. </summary>
            <param name="resolutionX">Raster width.</param>
            <param name="resolutionY">Raster height.</param>
            <param name="penWidth"></param>
        </member>
        <member name="M:SigStat.Common.Transforms.BinaryRasterizer.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.HSCPThinning">
            <summary>
            Iteratively thins the input binary raster with the <see cref="T:SigStat.Common.Algorithms.HSCPThinningStep"/> algorithm.
            <para>Pipeline Input type: bool[,]</para>
            <para>Default Pipeline Output: (bool[,]) HSCPThinningResult </para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.HSCPThinning.Input">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> for the binary image of the signature 
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.HSCPThinning.Output">
            <summary>
            Output <see cref="T:SigStat.Common.FeatureDescriptor"/> for the binary image of the signature 
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.HSCPThinning.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.ImageGenerator">
            <summary>
            Generates an image feature out of a binary raster.
            Optionally, saves the image to a png file.
            Useful for debugging pipeline steps.
            <para>Pipeline Input type: bool[,]</para>
            <para>Default Pipeline Output: (bool[,]) Input, (Image{Rgba32}) InputImage</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ImageGenerator.Input">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> for the binary image of a signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ImageGenerator.OutputImage">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> for the binary image of a signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ImageGenerator.WriteToFile">
            <summary>
            Gets or sets a value indicating whether the results should be saved to a file or not.
            </summary>
            <value>
              <c>true</c> if results should be saved to a file otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SigStat.Common.Transforms.ImageGenerator.ForegroundColor">
            <summary>
            Gets or sets the color of the foreground used to render the signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.ImageGenerator.BackgroundColor">
            <summary>
            Gets or sets the color of the backgroung used to render the signature
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ImageGenerator.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.ImageGenerator"/> class with default settings: skip file writing, Blue ink on white paper. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ImageGenerator.#ctor(System.Boolean)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.ImageGenerator"/> class with default settings. </summary>
            <param name="writeToFile">Whether to save the generated image into a png file.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.ImageGenerator.#ctor(System.Boolean,SixLabors.ImageSharp.PixelFormats.Rgba32,SixLabors.ImageSharp.PixelFormats.Rgba32)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.ImageGenerator"/> class with specified settings. </summary>
            <param name="writeToFile">Whether to save the generated image into a png file.</param>
            <param name="foregroundColor">Ink color.</param>
            <param name="backgroundColor">Paper color.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.ImageGenerator.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.OnePixelThinning">
            <summary>
            Iteratively thins the input binary raster with the <see cref="T:SigStat.Common.Algorithms.OnePixelThinningStep"/> algorithm.
            <para>Pipeline Input type: bool[,]</para>
            <para>Default Pipeline Output: (bool[,]) OnePixelThinningResult </para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.OnePixelThinning.Input">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> for the binary image of the signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.OnePixelThinning.Output">
            <summary>
            Output <see cref="T:SigStat.Common.FeatureDescriptor"/> for the binary image of the signature
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.OnePixelThinning.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.RealisticImageGenerator">
            <summary>
            Generates a realistic looking image of the Signature based on standard features. Uses blue ink and white paper. It does NOT save the image to file.
            <para>Default Pipeline Input: X, Y, Button, Pressure, Azimuth, Altitude <see cref="T:SigStat.Common.Features"/></para>
            <para>Default Pipeline Output: <see cref="F:SigStat.Common.Features.Image"/></para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.RealisticImageGenerator.X">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> describing the X coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.RealisticImageGenerator.Y">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> describing the Y coordinates of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.RealisticImageGenerator.Button">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> describing the stroke endings of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.RealisticImageGenerator.Pressure">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> describing the pressure values of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.RealisticImageGenerator.Altitude">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> describing the altitude values of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.RealisticImageGenerator.Azimuth">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> describing the azimuth values of an online signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.RealisticImageGenerator.OutputImage">
            <summary>
            Output <see cref="T:SigStat.Common.FeatureDescriptor"/> describing the generated image of the signature
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.RealisticImageGenerator.#ctor(System.Int32,System.Int32)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.RealisticImageGenerator"/> class with specified settings. </summary>
            <param name="resolutionX">Output image width.</param>
            <param name="resolutionY">Output image height.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.RealisticImageGenerator.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Transforms.RealisticImageGenerator.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Basic linear interpolation
            </summary>
            <param name="t0"></param>
            <param name="t1"></param>
            <param name="t">0.0f to 1.0f</param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Transforms.Resize">
            <summary>
            Resizes the image to a specified width and height
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Resize.InputImage">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> describing the image of the signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Resize.OutputImage">
            <summary>
            Output <see cref="T:SigStat.Common.FeatureDescriptor"/> describing the resized image of the signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Resize.Width">
            <summary>
            The new width. Leave it as null, if you do not want to explicitly specify a given width
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Resize.Height">
            <summary>
            The new height. Leave it as null, if you do not want to explicitly specify a given height
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Resize.ResizeFunction">
            <summary>
            Set a resize function if you want to dynamically calculate the new width and height of the image
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Resize.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.Trim">
            <summary>
            Trims unnecessary empty space from a binary raster.
            <para>Pipeline Input type: bool[,]</para>
            <para>Default Pipeline Output: (bool[,]) Trimmed</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Trim.Input">
            <summary>
            Input <see cref="T:SigStat.Common.FeatureDescriptor"/> describing the image of the signature
            </summary>
        </member>
        <member name="P:SigStat.Common.Transforms.Trim.Output">
            <summary>
            Output <see cref="T:SigStat.Common.FeatureDescriptor"/> describing the trimed image of the signature
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Trim.#ctor(System.Int32)">
            <param name="framewidth">Leave a border around the trimmed area. framewidth > 0</param>
        </member>
        <member name="M:SigStat.Common.Transforms.Trim.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Pipeline.IClassifier">
            <summary>
            Trains classification models based on reference signatures
            </summary>
        </member>
        <member name="M:SigStat.Common.Pipeline.IClassifier.Train(System.Collections.Generic.List{SigStat.Common.Signature})">
            <summary>
            Trains a model based on the signatures and returns the trained model
            </summary>
            <param name="signatures"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Pipeline.IClassifier.Test(SigStat.Common.Pipeline.ISignerModel,SigStat.Common.Signature)">
            <summary>
            Returns a double value in the range [0..1], representing the probability of the given signature belonging to the trained model.
            <list type="bullet">
            <item>0: non-match</item>
            <item>0.5: inconclusive</item>
            <item>1: match</item>
            </list>
            </summary>
            <param name="signature">The signature to test</param>
            <param name="model">The model aquired from the <see cref="M:SigStat.Common.Pipeline.IClassifier.Train(System.Collections.Generic.List{SigStat.Common.Signature})"/> method</param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Pipeline.IDistanceClassifier">
            <summary>
            Trains classification models based on reference signatures, by calculating the distances between signature pairs
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.IDistanceClassifier.DistanceFunction">
            <summary>
            A function to calculate the distance between two online signature points
            </summary>
        </member>
        <member name="T:SigStat.Common.Pipeline.Input">
            <summary>
            Annotates an input <see cref="T:SigStat.Common.FeatureDescriptor"/> in a transformation pipeline
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SigStat.Common.Pipeline.Input.AutoSetMode">
            <summary>
            The automatic set mode
            </summary>
        </member>
        <member name="M:SigStat.Common.Pipeline.Input.#ctor(SigStat.Common.Pipeline.AutoSetMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Pipeline.Input"/> class.
            </summary>
            <param name="AutoSetMode">The automatic set mode.</param>
        </member>
        <member name="T:SigStat.Common.Pipeline.Output">
            <summary>
            Annotates an output <see cref="T:SigStat.Common.FeatureDescriptor"/> in a transformation pipeline
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.Output.Default">
            <summary>
            The default value for the property
            </summary>
        </member>
        <member name="M:SigStat.Common.Pipeline.Output.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Pipeline.Output"/> class.
            </summary>
            <param name="Default">The default.</param>
        </member>
        <member name="M:SigStat.Common.Pipeline.Output.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Pipeline.Output"/> class.
            </summary>
        </member>
        <member name="T:SigStat.Common.Pipeline.AutoSetMode">
            <summary>
            Default strategy to set the value of a property
            </summary>
        </member>
        <member name="F:SigStat.Common.Pipeline.AutoSetMode.IfNull">
            <summary>
            Set the value if it is null
            </summary>
        </member>
        <member name="F:SigStat.Common.Pipeline.AutoSetMode.Always">
            <summary>
            Always set the value
            </summary>
        </member>
        <member name="F:SigStat.Common.Pipeline.AutoSetMode.Never">
            <summary>
            Never set the value
            </summary>
        </member>
        <member name="T:SigStat.Common.Pipeline.IPipelineIO">
            <summary>
            Supports the definition of <see cref="T:SigStat.Common.Pipeline.PipelineInput"/> and <see cref="T:SigStat.Common.Pipeline.PipelineOutput"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.IPipelineIO.PipelineInputs">
            <summary>
            A collection of inputs for the pipeline elements
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.IPipelineIO.PipelineOutputs">
            <summary>
            A collection of outputs for the pipeline elements
            </summary>
        </member>
        <member name="T:SigStat.Common.Pipeline.PipelineInput">
            <summary>
            Represents an input for a <see cref="F:SigStat.Common.Pipeline.PipelineInput.PipelineItem"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.PipelineInput.FD">
            <summary>
            Gets or sets the fd.
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.PipelineInput.AutoSetMode">
            <summary>
            Gets the AutoSetMode
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.PipelineInput.Type">
            <summary>
            Gets the type of the property
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.PipelineInput.IsCollectionOfFeatureDescriptors">
            <summary>
            Gets a value indicating whether this instance is collection of feature descriptors.
            </summary>
            <value>
              <c>true</c> if this instance is collection of feature descriptors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SigStat.Common.Pipeline.PipelineInput.PropName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="M:SigStat.Common.Pipeline.PipelineInput.#ctor(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Pipeline.PipelineInput"/> class.
            </summary>
            <param name="PipelineItem">The pipeline item.</param>
            <param name="PI">The pi.</param>
            <exception cref="T:System.Exception">Pipeline Input '{PropName}' of '{PipelineItem.ToString()}' not public</exception>
        </member>
        <member name="T:SigStat.Common.Pipeline.PipelineOutput">
            <summary>
            Represents an output for a <see cref="F:SigStat.Common.Pipeline.PipelineOutput.PipelineItem"/>
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.PipelineOutput.FD">
            <summary>
            Gets or sets the fd.
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.PipelineOutput.IsTemporary">
            <summary>
            Gets a value indicating whether this instance is temporary.
            </summary>
            <value>
              <c>true</c> if this instance is temporary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SigStat.Common.Pipeline.PipelineOutput.Default">
            <summary>
            Gets the default value
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.PipelineOutput.Type">
            <summary>
            Gets the type of the property
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.PipelineOutput.IsCollectionOfFeatureDescriptors">
            <summary>
            Gets a value indicating whether this instance is collection of feature descriptors.
            </summary>
            <value>
              <c>true</c> if this instance is collection of feature descriptors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SigStat.Common.Pipeline.PipelineOutput.PropName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="M:SigStat.Common.Pipeline.PipelineOutput.#ctor(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Pipeline.PipelineOutput"/> class.
            </summary>
            <param name="PipelineItem">The pipeline item.</param>
            <param name="PI">The pi.</param>
            <exception cref="T:System.Exception">Pipeline Output '{PropName}' of '{PipelineItem.ToString()}' not public</exception>
        </member>
        <member name="T:SigStat.Common.Pipeline.ISignerModel">
            <summary>
            Analyzes signatures based on their similiarity to the trained model
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.ISignerModel.SignerID">
            <summary>
            Identifies the signer, to whom this model belongs to
            </summary>
            <value>
            The signer identifier.
            </value>
        </member>
        <member name="T:SigStat.Common.Pipeline.ParallelTransformPipeline">
            <summary>
            Runs pipeline items in parallel.
            <para>Default Pipeline Output: Range of all the Item outputs.</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.ParallelTransformPipeline.Items">
            <summary>List of transforms to be run parallel.</summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.ParallelTransformPipeline.PipelineInputs">
            <summary>
            Gets the pipeline inputs.
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.ParallelTransformPipeline.PipelineOutputs">
            <summary>
            Gets the pipeline outputs.
            </summary>
        </member>
        <member name="M:SigStat.Common.Pipeline.ParallelTransformPipeline.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Pipeline.ParallelTransformPipeline.Add(SigStat.Common.ITransformation)">
            <summary>
            Add new transform to the list. 
            </summary>
            <param name="newItem"></param>
        </member>
        <member name="M:SigStat.Common.Pipeline.ParallelTransformPipeline.Transform(SigStat.Common.Signature)">
            <summary>
            Executes transform <see cref="P:SigStat.Common.Pipeline.ParallelTransformPipeline.Items"/> parallel.
            Passes input features for each.
            Output is a range of all the Item outputs.
            </summary>
            <param name="signature">Signature to execute transform on.</param>
        </member>
        <member name="T:SigStat.Common.Pipeline.SequentialTransformPipeline">
            <summary>
            Runs pipeline items in a sequence.
            <para>Default Pipeline Output: Output of the last Item in the sequence.</para>
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.SequentialTransformPipeline.Items">
            <summary>List of transforms to be run in sequence.</summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.SequentialTransformPipeline.PipelineInputs">
            <summary>
            Gets the pipeline inputs.
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.SequentialTransformPipeline.PipelineOutputs">
            <summary>
            Gets the pipeline outputs.
            </summary>
        </member>
        <member name="M:SigStat.Common.Pipeline.SequentialTransformPipeline.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Pipeline.SequentialTransformPipeline.Add(SigStat.Common.ITransformation)">
            <summary>
            Add new transform to the list. 
            </summary>
            <param name="newItem"></param>
        </member>
        <member name="M:SigStat.Common.Pipeline.SequentialTransformPipeline.Transform(SigStat.Common.Signature)">
            <summary>
            Executes transform <see cref="P:SigStat.Common.Pipeline.SequentialTransformPipeline.Items"/> in sequence.
            Passes input features for each.
            Output is the output of the last Item in the sequence.
            </summary>
            <param name="signature">Signature to execute transform on.</param>
        </member>
        <member name="T:SigStat.Common.ITransformation">
            <summary>
            Allows implementing a pipeline transform item capable of logging, progress tracking and IO rewiring.
            </summary>
        </member>
        <member name="M:SigStat.Common.ITransformation.Transform(SigStat.Common.Signature)">
            <summary>
            Executes the transform on the <paramref name="signature"/> parameter.
            This function gets called by the pipeline.
            </summary>
            <param name="signature">The <see cref="T:SigStat.Common.Signature"/> with a set of features to be transformed.</param>
        </member>
        <member name="T:SigStat.Common.PipelineBase">
            <summary>
            TODO: Ideiglenes osztaly, C# 8.0 ban ezt atalakitani default implementacios interface be.
            ILoggerObject, IProgress, IPipelineIO default implementacioja.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineBase.PipelineInputs">
            <summary>
            A collection of inputs for the pipeline elements
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineBase.PipelineOutputs">
            <summary>
            A collection of outputs for the pipeline elements
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.PipelineBase"/> class.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineBase.Logger">
            <inheritdoc/>
        </member>
        <member name="P:SigStat.Common.PipelineBase.Progress">
            <inheritdoc/>
        </member>
        <member name="E:SigStat.Common.PipelineBase.ProgressChanged">
            <summary>
            The event is raised whenever the value of <see cref="P:SigStat.Common.PipelineBase.Progress"/> changes
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineBase.OnProgressChanged">
            <summary>
            Raises the <see cref="E:SigStat.Common.PipelineBase.ProgressChanged"/> event
            </summary>
        </member>
    </members>
</doc>
